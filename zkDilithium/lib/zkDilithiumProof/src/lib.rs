use winterfell::math::{fields::f23201::BaseElement, FieldElement};
use winterfell::StarkProof;
use std::io::Write;

mod starkpf;
mod merklepf;
mod utils;

use crate::utils::poseidon_23_spec::{
    DIGEST_SIZE as HASH_DIGEST_WIDTH,
    RATE_WIDTH as HASH_RATE_WIDTH
};

use crate::starkpf::{N, K};

use std::ffi::CStr;
use std::ptr;
use std::slice;
use std::time::{Duration, Instant};

#[no_mangle]
pub extern "C" fn prove_signature(z_ptr: *const u32, w_ptr: *const u32, qw_ptr: *const u32, ctilde_ptr: *const u32, m_ptr: *const u32, comm_ptr: *const u32, comr_ptr: *const u32, nonce_ptr: *const u32, out_proof_bytes_len: *mut usize) -> *const u8 {

    //For now lets just assume that the input's length is ok
    //Convert from the C bytes to something rust readable
    let mut z: [[BaseElement; N]; K] = [[BaseElement::ZERO; N]; K];
    let mut w: [[BaseElement; N]; K] = [[BaseElement::ZERO; N]; K];
    let mut qw: [[BaseElement; N]; K] = [[BaseElement::ZERO; N]; K];
    let mut ctilde: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    let mut m: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    let mut comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
    let mut com_r: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];

    unsafe {
        for i in 0..K {
            for j in 0..N {
                z[i][j] = BaseElement::new(*(z_ptr.add(i*N+j)));
                w[i][j] = BaseElement::new(*(w_ptr.add(i*N+j)));
                qw[i][j] = BaseElement::new(*(qw_ptr.add(i*N+j)));
            }
        }

        for i in 0..HASH_DIGEST_WIDTH {
            ctilde[i] = BaseElement::new(*(ctilde_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            m[i] = BaseElement::new(*(m_ptr.add(i)));
        }

        for i in 0..HASH_RATE_WIDTH {
            comm[i] = BaseElement::new(*(comm_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            com_r[i] = BaseElement::new(*(comr_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            nonce[i] = BaseElement::new(*(nonce_ptr.add(i)));
        }
    }
    let proof_bytes = starkpf::prove(z, w, qw, ctilde, m, comm, com_r, nonce).to_bytes();

    unsafe {
        *out_proof_bytes_len = proof_bytes.len();
    }

    return &proof_bytes[0]
}

#[no_mangle]
pub extern "C" fn verify_signature(proof_bytes_ptr: *const u8, proof_bytes_len: usize, comm_ptr: *const u32, nonce_ptr: *const u32) -> u32 {

    let proof = StarkProof::from_bytes(unsafe {slice::from_raw_parts(proof_bytes_ptr, proof_bytes_len)}).unwrap();
    let mut comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
    let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    unsafe {
        for i in 0..HASH_RATE_WIDTH {
            comm[i] = BaseElement::new(*(comm_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            nonce[i] = BaseElement::new(*(nonce_ptr.add(i)));
        }
    }

    match starkpf::verify(proof.clone(), comm, nonce) {
        Ok(_) => {
            println!("Verified.");
            return 1;
        },
        Err(msg) => 
        {
            println!("Failed to verify proof: {}", msg);
            return 0;
        }
    }
}

#[no_mangle]
pub extern "C" fn prove_attributes(num_of_certs: usize, cert_list_ptr: *const u32, num_of_attributes: *const usize, disclosed_indices_ptr: *const usize, num_of_disclosed_indices: *const usize, commitments_ptr: *const u32, nonces_ptr: *const u32, out_proof_bytes_len: *mut usize) -> *const u8 {

    let mut cert_list = Vec::new();
    let mut disclosed_indices= Vec::new();
    let mut comms = Vec::new();
    let mut nonces = Vec::new();

    let mut attributes_counter = 0;
    let mut disclosed_indeces_counter = 0;

    for i in 0..num_of_certs {
        cert_list.push(Vec::new());
        let current_num_of_attributes = unsafe{*num_of_attributes.add(i)};
        for j in 0..current_num_of_attributes {
            let mut attribute: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
            for k in 0..HASH_DIGEST_WIDTH {
                attribute[k] = BaseElement::new(unsafe{*cert_list_ptr.add(attributes_counter+j*HASH_DIGEST_WIDTH+k)});
            }
            cert_list[i].push(attribute);
        }
        attributes_counter += current_num_of_attributes;

        disclosed_indices.push(Vec::new());
        let current_num_of_disclosed_indices = unsafe{*num_of_disclosed_indices.add(i)};
        for j in 0..current_num_of_disclosed_indices {
            disclosed_indices[i].push(unsafe{*disclosed_indices_ptr.add(disclosed_indeces_counter+j)});
        }
        disclosed_indeces_counter += current_num_of_disclosed_indices;

        let mut comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
        for j in 0..HASH_RATE_WIDTH {
            comm[j] = BaseElement::new(unsafe{*commitments_ptr.add(i*HASH_RATE_WIDTH+j)});
        }
        comms.push(comm);

        let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
        for j in 0..HASH_DIGEST_WIDTH {
            nonce[j] = BaseElement::new(unsafe{*nonces_ptr.add(i*HASH_DIGEST_WIDTH+j)});
        }
        nonces.push(nonce);
    }


    let proof_bytes = merklepf::prove(cert_list.clone(), disclosed_indices.clone(), comms.clone(), nonces.clone()).to_bytes();

    unsafe {
        *out_proof_bytes_len = proof_bytes.len();
    }

    return &proof_bytes[0]
}

#[no_mangle]
pub extern "C" fn verify_attributes(proof_bytes_ptr: *const u8, proof_bytes_len: usize, num_of_certs: usize, disclosed_attributes_ptr: *const u32, num_of_disclosed_attributes: *const usize, disclosed_indices_ptr: *const usize, num_of_attributes_ptr: *const usize, commitments_ptr: *const u32, nonces_ptr: *const u32) -> u32 {

    let proof = StarkProof::from_bytes(unsafe {slice::from_raw_parts(proof_bytes_ptr, proof_bytes_len)}).unwrap();

    let mut disclosed_attributes = Vec::new();
    let mut disclosed_indices= Vec::new();
    let mut num_of_attributes = Vec::new();
    let mut comms = Vec::new();
    let mut nonces = Vec::new();

    let mut disclosed_attributes_counter = 0;

    for i in 0..num_of_certs {
        disclosed_attributes.push(Vec::new());
        disclosed_indices.push(Vec::new());
        let current_num_of_disclosed_attributes = unsafe{*num_of_disclosed_attributes.add(i)};
        for j in 0..current_num_of_disclosed_attributes {
            let mut attribute: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
            for k in 0..HASH_DIGEST_WIDTH {
                attribute[k] = BaseElement::new(unsafe{*disclosed_attributes_ptr.add(disclosed_attributes_counter+j*HASH_DIGEST_WIDTH+k)})
            }
            disclosed_attributes[i].push(attribute);

            disclosed_indices[i].push(unsafe{*disclosed_indices_ptr.add(disclosed_attributes_counter+j)});
        }
        disclosed_attributes_counter += current_num_of_disclosed_attributes;

        num_of_attributes.push(unsafe {*num_of_attributes_ptr.add(i)});

        let mut comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
        for j in 0..HASH_RATE_WIDTH {
            comm[j] = BaseElement::new(unsafe{*commitments_ptr.add(i*HASH_RATE_WIDTH+j)});
        }
        comms.push(comm);

        let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
        for j in 0..HASH_DIGEST_WIDTH {
            nonce[j] = BaseElement::new(unsafe{*nonces_ptr.add(i*HASH_DIGEST_WIDTH+j)});
        }
        nonces.push(nonce);
    }

    match merklepf::verify(proof.clone(), disclosed_attributes.clone(), disclosed_indices.clone(), num_of_attributes.clone(), comms.clone(), nonces.clone()) {
        Ok(_) => {
            println!("Verified.");
            return 1;
        },
        Err(msg) => 
        {
            println!("Failed to verify proof: {}", msg);
            return 0;
        }
    }
}

#[cfg(test)]
pub mod test1 {

    use std::ffi::CString;
    use super::*;
    use libc::c_uchar;
    use libc::c_uint;

    // This is meant to do the same stuff as the main function in the .go files
    #[test]
    fn simulated_main_function () {
        let zbytes: [u32; N*4] = [
            95687, 50558, 7212120, 111315, 89140, 7290745, 83619, 7221937, 7306643, 95402, 24433, 7306681, 59598, 7317993, 7226664, 7313329, 52346, 7325043, 7209526, 110106, 7325525, 7230735, 26677, 40899, 7326628, 7215801, 64903, 45909, 7216211, 105973, 49140, 7236649, 98755, 7264619, 76887, 7289343, 63835, 12444, 7339491, 85988, 16514, 13180, 7230569, 7313416, 130967, 72703, 7248986, 7241143, 7296806, 63351, 63931, 119015, 27378, 7264910, 7237251, 128290, 7330091, 7311960, 2492, 107667, 7295307, 7250531, 84558, 79521, 7329592, 74998, 7242611, 7334701, 7240977, 7297523, 33973, 7334308, 119908, 46269, 13830, 7339619, 117008, 7227694, 85012, 8124, 84012, 38876, 111975, 25088, 62088, 7314901, 105962, 7273077, 7213229, 7298141, 7238204, 7316669, 98357, 101641, 7334080, 31292, 7297118, 7305569, 7217036, 7227000, 7223869, 7315740, 99492, 55375, 7305413, 7331091, 7246019, 119440, 7209716, 7226362, 74790, 44686, 28803, 89257, 47921, 90805, 7227989, 11979, 7274417, 130073, 7336423, 7278452, 7288843, 7333454, 7280341, 46220, 44782, 84925, 7230671, 50011, 116078, 61139, 7213578, 7247067, 107626, 68744, 66674, 7443, 7309048, 3818, 7238101, 27062, 7229564, 119922, 7268468, 7268738, 7305494, 7275438, 7268640, 7235717, 7333010, 115101, 110984, 3040, 28887, 7223160, 61278, 7275885, 22138, 106983, 115590, 7298848, 7304724, 117365, 7252409, 7228978, 7306130, 79233, 7217252, 7293937, 7236853, 7258416, 75854, 7312779, 24617, 469, 7261734, 7265783, 7218707, 44263, 73449, 44592, 7223063, 7264727, 7323593, 7333333, 108834, 53954, 75253, 96253, 3652, 117959, 7255976, 7209404, 7221915, 7246667, 63835, 90293, 19331, 7256758, 7285594, 7316219, 68314, 7315665, 7264635, 7309220, 23089, 36331, 7292888, 7268957, 72548, 105035, 17531, 7283404, 38696, 7270375, 7323448, 50340, 72873, 7318513, 7329350, 7219593, 7291765, 82668, 7305787, 7290098, 39639, 44443, 14526, 54335, 7289305, 7243328, 7290672, 60620, 109561, 5449, 90600, 7322883, 7233520, 7264752, 7293052, 7210050, 7266566, 7293266, 130536, 73136, 7269280, 7231694, 7271241, 6891, 7273994, 7305619, 7337418, 7319756, 18686, 7325043, 
7284048, 7310124, 7328810, 32154, 62438, 103799, 37564, 7234783, 82009, 54011, 118810, 83848, 7289268, 27610, 7241176, 38109, 7261475, 7266145, 98963, 37258, 7336373, 14086, 7325165, 123546, 7232129, 7226052, 64551, 18915, 76903, 96281, 7288550, 7263269, 7226535, 87484, 7310523, 7328028, 69953, 7315476, 23861, 7287866, 130241, 37843, 78522, 14149, 7337172, 129665, 7311801, 7231874, 11243, 7246788, 7308449, 7338232, 7226432, 7296091, 14738, 7297050, 7277347, 7303477, 7313074, 7232578, 106839, 65285, 24766, 41117, 112683, 106565, 114151, 7222527, 7272624, 7307073, 18324, 34524, 7257043, 7295239, 95346, 116179, 53302, 7290661, 7248793, 7217761, 84412, 7263300, 61755, 5369, 12073, 41743, 94267, 44489, 7271124, 7338094, 7290435, 9934, 106511, 108896, 118447, 7226812, 7301996, 5012, 7305371, 7310813, 7243620, 7237652, 7282007, 55613, 7251589, 73409, 7268358, 7312014, 7230650, 9893, 3883, 7303446, 105425, 7222008, 7267241, 48629, 7282989, 7250624, 7246609, 7233376, 7225339, 7283596, 121089, 7306719, 7326193, 98060, 124407, 101445, 7328747, 57436, 7214164, 6301, 7245759, 57912, 73291, 7211138, 56271, 26536, 48377, 61970, 113155, 7301969, 60704, 7217694, 7296565, 41424, 101863, 18844, 7275159, 7276457, 68323, 15292, 33111, 7335088, 65696, 7305608, 7304184, 7236885, 7249101, 44955, 7251294, 7329125, 7273625, 128290, 7278591, 103847, 7295412, 7212601, 7216349, 63177, 61756, 22789, 37730, 7298210, 7320294, 41968, 7339415, 52572, 7256560, 35521, 7339453, 30364, 101737, 13369, 50304, 7294419, 7266209, 7271107, 7304206, 95191, 7254252, 38829, 7287391, 7271387, 38442, 103954, 5596, 7267749, 7270505, 7312001, 67195, 7276414, 15546, 7265972, 7288529, 119329, 7332012, 7214706, 109591, 7294330, 107427, 7230684, 7266718, 7315820, 7243558, 72744, 93213, 7224099, 114970, 7227584, 81865, 28285, 24970, 107496, 35039, 129410, 17315, 7235855, 7238849, 44214, 107554, 56559, 33424, 7294369, 7309229, 123879, 22915, 7313334, 7258334, 95476, 7284562, 19380, 7338246, 32028, 7306274, 13187, 67745, 123576, 7265601, 7258188, 89548, 7310698, 7235305, 7218812, 64380, 7292664, 
18034, 49190, 7332808, 7300256, 7300710, 7325346, 48932, 7291480, 31090, 109157, 7238259, 7263057, 7241111, 9260, 7219619, 7230760, 7331204, 7329753, 7212788, 7236167, 55778, 7220210, 54535, 30817, 98819, 76271, 7230547, 120443, 7318759, 7212814, 7256872, 71655, 7224458, 7264238, 83470, 57526, 17772, 116883, 54741, 7259244, 7333581, 7337775, 36303, 7286148, 7331799, 9074, 110076, 7224706, 7323936, 7237865, 64702, 51721, 130187, 64997, 41491, 37558, 7285503, 7229701, 7242015, 99646, 46829, 92148, 7287535, 7212871, 23248, 66040, 2397, 47202, 7221864, 23719, 7330577, 10182, 7328887, 56194, 95067, 7246500, 50401, 27548, 10964, 7316446, 127845, 109621, 15511, 7254791, 56384, 110851, 7220460, 45278, 3826, 7241046, 36551, 7253325, 96790, 104309, 9778, 7331604, 7263875, 7326407, 7233752, 7334448, 7272088, 125106, 128109, 84122, 7287513, 7223225, 7295545, 7250318, 68340, 76029, 7285457, 7289431, 21104, 7309099, 115743, 108660, 7298437, 7227214, 7298774, 65966, 53718, 91248, 71420, 87265, 7265392, 7269554, 7223516, 7292748, 56761, 118202, 7296466, 7339404, 65992, 7223746, 103042, 7307712, 7317623, 7294818, 121219, 7315841, 61578, 31252, 7329777, 7302007, 7285722, 7220540, 33937, 7332805, 54418, 118567, 105706, 7320746, 114873, 7306362, 107793, 7267489, 7287563, 7310924, 53963, 7241824, 99536, 1330, 102603, 7310557, 7299377, 91613, 7265515, 32627, 14035, 73340, 7331278, 7212091, 7323875, 96291, 108668, 83773, 6429, 7321318, 7241509, 7305751, 7220421, 18095, 7294541, 19590, 7261377, 95828, 60650, 42541, 7227880, 110952, 7246358, 83359, 7337182, 7309213, 1306, 7250859, 102741, 7275294, 68569, 7238847, 53047, 117423, 7306946, 106027, 7316056, 122794, 102674, 117878, 7289230, 7975, 7254234, 7319965, 7338145, 48287, 55577, 39575, 7231502, 101845, 105923, 34911, 7300629, 7237466, 7258907, 7326827, 111737, 93455, 93057, 108715, 7267701, 7279028, 7262467, 7275333, 118630, 7211119, 11467, 7309622, 7323889, 7214060, 82890, 7255941, 7247273, 7308351, 7225351, 79134, 23611, 7243263, 7292749, 7215564, 76171, 88737, 7280005, 98420, 124181, 7266742, 7289721, 8207, 
115576, 52859, 7219082, 7228601, 114451, 7250045, 44719, 7293267, 124115, 7258700, 7236541, 74917, 7275758, 95748, 7303538, 7319762, 99418, 7235608, 117315, 94399, 7244686, 7240785, 114312, 7326779, 7232, 39497, 4268, 7283624, 7245925, 7263702, 24990, 33993, 7244620, 95675, 7296342, 7280311, 52770, 7287679, 7276291, 17873, 7237233, 122007, 29495, 39396, 7213362, 7272975, 66575, 14632, 108926, 32818, 98048, 7315927, 58648, 7332568, 7269130, 7227897, 106894, 7273210, 114326, 7256061, 130539, 7248812, 7292561, 92782, 100656, 17142, 9305, 7272449, 7215825, 7251101, 7325081, 7248259, 7323674, 7282296, 21403, 7261010, 66245, 47723, 89390, 7307729, 86390, 7326227, 86306, 121116, 49796, 7217313, 7293305, 16143, 7288879, 4794, 7255253, 7268994, 7235905, 7223601, 7230096, 2009, 7241865, 7234408, 81953, 50702, 101498, 7223789, 7299618, 7312269, 13971, 92599, 11390, 7213508, 7287278, 7220447, 18220, 94424, 7300628, 123594, 7247621, 7253604, 7287785, 7278591, 104876, 7287137, 7319281, 65046, 7294792, 22242, 7292651, 7278315, 7219312, 7295472, 28611, 105469, 64782, 118094, 126441, 49829, 31624, 7233519, 7317875, 6524, 129842, 26665, 7315622, 7296197, 7314214, 7264917, 63199, 7327777, 7266005, 7265838, 117160, 7314544, 129115, 34488, 7307401, 100743, 93924, 7319, 48277, 7261214, 7315576, 70230, 7318546, 7273410, 47622, 117962, 7268852, 7256882, 7250736, 7262869, 7261047, 107878, 70643, 46235, 48558, 80736, 15931, 7229042, 19843, 7280583, 97857, 7258480, 7329211, 7336033, 111445, 94065, 18255, 7284788, 80098, 7320006, 7210870, 7327280, 58245, 73867, 77488, 4617, 7211944, 99379, 66288, 67231, 27145, 7286276, 7275008, 7224757, 91804, 78724, 115865, 7241449, 6949, 7322241, 125279, 57950, 9510, 101775, 83811, 7232421, 7325203, 7310600, 33261, 7282425, 18319, 7252554, 861, 41548, 7270053, 7215368, 71888, 7222570, 110605, 1132, 7258268, 7225134, 128671, 44509, 97498, 108989, 7296131, 7334798, 7256097, 7273449, 7328652, 7223609, 7220581, 7283851, 7271920, 44643, 34180, 45751, 112003, 82116, 7225561, 100277, 103287, 7212960, 45795, 7297721, 96712, 7215521
        ];

        let wbytes: [u32; N*4] = [
            6017691, 4895719, 3890836, 6549504, 389934, 3230995, 3551207, 4451479, 1992297, 445222, 1754217, 3929154, 7258311, 4678614, 4924100, 3396788, 3694436, 4495378, 5238541, 16927, 5031132, 3232525, 4943275, 4485816, 4766404, 5703247, 3707029, 4029069, 5575058, 2676911, 1986277, 5945340, 4472580, 6296164, 5594968, 3225914, 965405, 3483693, 3248022, 2307874, 4185781, 3613776, 6134830, 6747524, 5858126, 1868172, 2920643, 4367620, 3956038, 2616519, 3263531, 6146957, 6483474, 6078082, 5223075, 5325994, 3870367, 1636570, 660685, 349015, 4403519, 742807, 6908554, 1604359, 1727031, 156830, 5578348, 1641176, 4203245, 5090485, 1761668, 3713361, 3122177, 4665868, 814238, 5577185, 4560528, 646737, 4783971, 7185932, 6568214, 3874046, 6652632, 2654374, 172952, 5640115, 4802162, 5111179, 5831252, 5554536, 7179832, 2996341, 6864964, 619226, 6052852, 2661484, 484281, 3535539, 5520038, 2955365, 1392458, 2564542, 236860, 2619951, 957146, 1352173, 6272024, 7199333, 6757843, 5319712, 4210982, 1448561, 3827440, 7224654, 927249, 3218838, 2280928, 139049, 5288060, 4257799, 6158517, 254661, 1059566, 5013057, 4570180, 4587383, 3239609, 6523354, 945839, 610409, 6042728, 2104346, 5823518, 4436203, 1029300, 1698281, 5121659, 2819099, 2245086, 1642689, 7019946, 5127770, 4847539, 7073728, 2435390, 2783083, 3685502, 6175333, 4895203, 3504414, 2670393, 2174635, 6687942, 7094094, 5118240, 3660297, 1126336, 4371481, 5358582, 4563663, 3629822, 2605875, 2946780, 5041148, 6853688, 1422298, 5199774, 5858649, 292689, 3137217, 6986227, 25090, 6916763, 1839011, 3872079, 759677, 6410852, 4996274, 1194042, 2891223, 338672, 6507283, 4177980, 1494496, 2702873, 1851230, 2298131, 6347854, 7226181, 2907054, 6476504, 5135108, 6898354, 6004009, 2295793, 812894, 5613593, 5561997, 4070221, 1315973, 3460653, 2931037, 2193560, 74903, 4302200, 5411103, 478741, 5485934, 4492428, 554696, 6640542, 2532090, 1548333, 7015322, 7045592, 4777387, 3018395, 4506515, 7285067, 4769578, 3307595, 2319914, 5681155, 3419118, 2272269, 6087014, 1784875, 7039455, 6891595, 4652337, 4586032, 6965384, 1331842, 128683, 5891598, 6699871, 5025989, 3068853, 3097109, 4779789, 3501855, 1721041, 4304827, 827920, 3403255, 1519185, 6158279, 7274030, 4002255, 7294094, 3354457, 915241, 1987854, 903644, 3464715, 2164519, 
89248, 2090780, 4360806, 1882464, 2135853, 4125928, 5605182, 5612942, 6626502, 2097140, 4219933, 7042622, 6678231, 2014296, 6553641, 6777540, 2799270, 1623222, 1079752, 350249, 6025753, 4026612, 2817864, 6204316, 4005029, 4353188, 5933077, 4178229, 2269052, 1407555, 2016252, 568790, 977363, 2023652, 4039492, 5055237, 6429170, 6842216, 4899800, 859647, 7333289, 1884067, 3121801, 5904220, 2342862, 3369337, 402756, 4739107, 472963, 6998473, 7132922, 1700081, 2922166, 5113002, 2262732, 6982010, 1121533, 782601, 1928308, 1105384, 590274, 6364095, 1450446, 6879675, 3477021, 2009060, 3513877, 6770264, 1701880, 3394565, 7081924, 3802815, 4302271, 6141132, 3446227, 317601, 5033143, 930350, 1255806, 1269111, 5968261, 5076634, 4374134, 1842371, 2523659, 698017, 1573160, 4542999, 5931721, 7214885, 21381, 931174, 530467, 1447539, 5280283, 6824999, 951301, 3094308, 754225, 2173990, 3995599, 1106250, 3753341, 2287345, 2891628, 5941004, 4517717, 2955974, 7014898, 1098303, 43799, 1683881, 6841359, 5293994, 130582, 6570657, 2451962, 2468709, 2880532, 1018401, 6089562, 3156658, 6984748, 2238734, 5741345, 46736, 2310442, 4650320, 2695097, 171935, 6658165, 7233139, 5954833, 5673536, 2710061, 895242, 6978911, 3421830, 3691731, 2510307, 5870712, 2051758, 6649101, 172760, 6427249, 359589, 3757710, 6331356, 4187341, 6080903, 1013908, 918795, 2128995, 1633549, 4601117, 6787684, 837993, 3852298, 2565858, 2627200, 4909205, 5450663, 3877129, 3629114, 1567081, 886554, 4930845, 5976053, 5951796, 3664375, 3673809, 246575, 6225365, 2431065, 6199504, 5132834, 851756, 3104116, 4727461, 4484676, 5138959, 7021604, 709833, 5333928, 5476744, 4922689, 274784, 1379943, 5830188, 3645084, 477441, 2760291, 1686892, 5364988, 6150987, 2676717, 2065113, 4098006, 647027, 1962319, 5874708, 290566, 4315186, 4228166, 6738955, 370528, 3412472, 7336322, 57088, 1426156, 887275, 5086366, 5601910, 6412366, 3521241, 4245896, 1051952, 763119, 4325884, 1703225, 854554, 5840366, 6448388, 2041511, 1318221, 1487952, 834125, 5114890, 104654, 337798, 5196026, 2714957, 167404, 5897421, 1464167, 2064682, 4864977, 2170580, 7078371, 670563, 481769, 5746124, 2393556, 6507264, 5782668, 5991958, 4405094, 7025838, 6264490, 554405, 5240828, 3666675, 1973432, 1114774, 1552403, 6324137, 
1607855, 4835125, 3280249, 4406417, 3532704, 4292782, 5004505, 3312329, 5312278, 6014012, 1768657, 3734741, 2951584, 3675886, 5945270, 1186718, 5286289, 5585934, 5422081, 3095123, 1500773, 4226236, 6622980, 1011295, 4455094, 3798336, 3377829, 5235710, 505171, 6808778, 2136750, 1465395, 1497292, 7039478, 382520, 2882853, 5395662, 5548935, 1109400, 3039710, 5562174, 2820524, 831764, 5000253, 6166617, 632287, 4000665, 5536575, 1396870, 1408093, 6154612, 4720441, 840351, 482304, 2339256, 1323462, 239923, 1516001, 2019539, 6966847, 4702573, 669520, 6360705, 6553204, 663206, 6844644, 4579679, 2581381, 4203417, 3282166, 3614121, 2143581, 1671871, 3467152, 1942938, 4247717, 470650, 4526443, 6663830, 1680513, 5279511, 5931690, 6016768, 4940176, 3962349, 1007842, 2949908, 1128213, 3673173, 5315335, 374932, 2176745, 480714, 3803295, 1143120, 6617640, 4253773, 5188607, 2956866, 4081431, 479859, 2295600, 4029074, 38470, 4849522, 702365, 6877084, 6963869, 5466795, 5196161, 1982871, 3463157, 4364218, 1217051, 510965, 5333065, 2444278, 1719390, 1774413, 5604750, 3496750, 5793037, 255827, 336537, 3666417, 1805397, 6961068, 6381215, 301503, 739437, 4757830, 3626630, 2737999, 5864353, 5489880, 5768632, 1706385, 5534764, 2767662, 5830866, 2577232, 5703945, 535631, 2555038, 2630813, 4486252, 3577630, 6330981, 782675, 5393016, 5001831, 4082296, 3570027, 3572071, 4507560, 6495060, 2796848, 7046189, 1249101, 5172789, 6295379, 4601126, 5602304, 127915, 2276471, 1612827, 2771333, 5286175, 315023, 5731394, 55474, 5001056, 3388643, 3878967, 2652145, 5766425, 620044, 656073, 2561433, 6780244, 2569804, 2422358, 3792059, 5776604, 1664323, 7129908, 5013618, 2146209, 77180, 6743098, 1867161, 132933, 1628206, 148871, 2844312, 3045695, 7176142, 1800326, 4036893, 7101027, 5123301, 4010275, 5872658, 4952779, 4248925, 5680328, 1068386, 6616585, 4436312, 2470381, 6618731, 7198767, 3546796, 2656068, 5367988, 5280080, 974897, 1114484, 2580285, 214739, 1789625, 5733818, 2701059, 3938367, 3710739, 1633659, 6003607, 3435601, 6879010, 4295450, 6618083, 2587120, 6019288, 2903268, 5768167, 1490449, 465082, 3385490, 4712387, 6233629, 7137946, 1812922, 1913640, 1282874, 5127815, 4820894, 713095, 5238114, 4961965, 2313014, 2942470, 5985884, 3775903, 5517968, 7109813, 5919022, 
5281342, 6689100, 6709717, 846304, 1421578, 1212012, 4861531, 3178584, 6564012, 4920692, 911097, 3477181, 6903129, 6314196, 2646475, 1336797, 1800248, 6713446, 2251612, 793351, 4821379, 3317148, 3896826, 3082990, 6871468, 5642930, 5482085, 4656712, 3878980, 7086140, 855313, 3833879, 1797411, 1788676, 72919, 2670508, 4882407, 6870359, 4956011, 2849003, 1619139, 4707435, 5519738, 6589266, 135825, 2772521, 2693530, 2724729, 1034564, 5068378, 5348176, 7273646, 5476228, 2030128, 1807750, 1790049, 1941197, 5374272, 5655405, 2824052, 5714781, 2824230, 598530, 3234594, 2957370, 9553, 5754852, 633143, 2428665, 6570895, 6061931, 1647509, 983730, 4825505, 4515058, 4085966, 3128882, 4354637, 3324901, 6300630, 1684837, 7266921, 3290548, 3562922, 377576, 5239869, 6082799, 1179473, 5052586, 2840255, 4306844, 4600768, 3024529, 4860793, 3822438, 1778971, 6646784, 5576748, 2056243, 1936484, 220778, 1388012, 1261510, 770886, 4700409, 569127, 5061349, 2705346, 4796803, 722466, 7280135, 2604445, 3340100, 4590795, 3883198, 3390788, 3644728, 350584, 6371994, 3574277, 168358, 73315, 2531129, 4861983, 3619418, 5728637, 6940784, 5315277, 5116376, 4954515, 5764554, 2126717, 6236362, 4044637, 3989094, 1221209, 551747, 6263256, 6507580, 1786732, 2577800, 6127444, 368083, 4374916, 2248660, 2164095, 4435543, 6818514, 2084117, 6268417, 3811041, 6092134, 6990515, 4071010, 1381638, 4526918, 2276767, 6444646, 3443982, 4451007, 2052497, 6903019, 6711374, 5261713, 232765, 2784235, 2545347, 3739337, 326877, 264759, 4126487, 6908735, 1223479, 2438846, 1241739, 5786156, 2115255, 4909448, 3924808, 6165588, 6226232, 7009287, 1761611, 6560777, 4592952, 2226946, 6015434, 6060178, 3754685, 4694110, 3270691, 3434890, 1157741, 3994299, 4546470, 3682723, 3027465, 6759741, 5761734, 5940616, 1703386, 4970239, 81006, 3918564, 6643375, 3757403, 1448842, 2604313, 2137862, 391580, 2617447, 6720127, 3858170, 1770483, 3938961, 491039, 1446406, 1776193, 1774665, 4113074, 5932276, 7112035, 7143637, 4630557, 2213005, 1178588, 5787723, 3252022, 1395354, 1557535, 5646182, 3940050, 2871878, 6353157, 6777379, 4930121, 2381791, 5738310, 4627719, 2504005, 731603, 5488992, 356272, 918943, 7114425, 3739888, 1883050, 4637287, 3526732, 2539221, 989661, 258441, 5135442, 7316498, 426316, 2433678];


        let qwbytes: [u32; N*4] = [7101914, 1947397, 1775328, 2816562, 5374661, 2084830, 3656617, 6317393, 718761, 616699, 3379693, 4157831, 6187601, 5870459, 4461018, 5103729, 5303242, 2650925, 3593880, 6164505, 856917, 1510642, 5980481, 3578394, 4479709, 1706221, 6469142, 567574, 2291591, 3670444, 7237937, 3296562, 1265894, 2922900, 2512221, 2925642, 3445424, 1147564, 3367020, 6718974, 4081330, 5037508, 2505230, 262072, 5408300, 1377470, 5368904, 3647927, 785883, 5222131, 2559574, 1473075, 834152, 4029904, 1100601, 3012999, 2026765, 2495668, 6722323, 238287, 3012011, 5238535, 5308140, 2417800, 1326653, 2282092, 4276719, 7151023, 6913404, 3211769, 3686697, 1233198, 6132420, 3482366, 4473222, 4679351, 4602203, 4485867, 6657805, 3179767, 3530706, 4379522, 2738894, 717880, 1723119, 1730743, 218625, 6060590, 6177894, 1655186, 5603670, 2537154, 7203438, 1378555, 7318977, 15224, 7280345, 2027753, 2210839, 4707788, 4350829, 5938888, 5256546, 4461028, 6780007, 436077, 2769373, 6251524, 1109773, 1615394, 4269693, 1067123, 3756479, 6541266, 200567, 2941528, 5672368, 1259472, 4073094, 3908936, 7261973, 7286754, 4954908, 6440748, 1537940, 5075339, 3147433, 2833046, 3487201, 3816369, 5998929, 88132, 487837, 5298660, 4511735, 37702, 5823860, 6979391, 5548313, 5173715, 5268218, 6379530, 2819893, 6678767, 657740, 3608847, 7045447, 5702733, 5785427, 6153536, 4221680, 689491, 2906175, 6512107, 396046, 5593358, 3733584, 2166825, 5999369, 4138903, 3844520, 900799, 4202911, 382603, 2069558, 2058751, 2734710, 4754727, 4628849, 134741, 1147321, 6856626, 5238028, 2925470, 2243827, 1390210, 5688502, 2867812, 4781150, 1298402, 6470329, 5525184, 7177919, 6690319, 4785965, 3168893, 5187133, 672018, 4256365, 1886915, 172820, 6902522, 4788800, 4235646, 5302161, 6736225, 3670787, 831314, 6100615, 5793650, 3101429, 541238, 605337, 493837, 1364225, 178375, 2560972, 5927860, 6854035, 1359717, 890446, 4870608, 2610480, 4043716, 2657506, 4862517, 1182514, 2999425, 3208228, 4758211, 6747871, 5235692, 3896946, 6134697, 5876728, 6010633, 2281564, 1179677, 3414191, 867180, 3376878, 4938941, 5868675, 284383, 6321637, 888738, 3589474, 5400905, 4736037, 2873141, 4938420, 2188247, 2060928, 3203803, 833501, 4991804, 6524341, 2735303, 3756650, 4536359, 449966, 562403, 4101798, 776244, 2069367, 0, 
1398062, 780143, 6159688, 1857273, 2561722, 5880323, 3388376, 6246102, 736602, 751139, 7292705, 4265352, 1648875, 6644912, 6806221, 5981657, 4831618, 7230690, 222153, 1429303, 1480136, 5068852, 3344449, 911297, 106234, 5656966, 671123, 4703624, 2318729, 1291816, 1222023, 2794400, 3995503, 3510327, 4373210, 2242367, 2674950, 457684, 6047052, 2898645, 1570095, 6269154, 3771597, 1359479, 6449955, 1380722, 1686656, 6209164, 1903160, 1917969, 3690503, 4931208, 1749134, 5993791, 4790230, 3341657, 4407340, 6678535, 2180460, 4820480, 2502080, 450393, 7113837, 2311391, 491565, 1150192, 6060182, 1087080, 5647291, 5546390, 1717547, 1065218, 2535581, 752285, 5709062, 4698135, 1880355, 7237050, 5677676, 189921, 2996992, 5318771, 6885812, 3950464, 5834383, 6110256, 6855763, 1738556, 4736795, 6290182, 5361084, 6725083, 5683045, 5438774, 1056926, 4828688, 641818, 2866944, 414718, 4492624, 5964909, 540389, 2921863, 5035733, 1637430, 4909283, 5539644, 6583515, 3924822, 1607836, 4599098, 6559358, 4746143, 3802179, 4191925, 4852814, 4750751, 6478776, 2640268, 4592062, 402243, 4082802, 2155771, 5300095, 4514731, 2728930, 3015672, 4041157, 145159, 3489817, 4412247, 7139258, 7003518, 3852602, 3746922, 3811250, 5049329, 4635375, 5397014, 3185352, 5525114, 1859073, 2633670, 4117443, 3233679, 5624614, 2743200, 1951467, 3178657, 1066323, 1177019, 5864057, 6231296, 6344670, 6180348, 1070707, 1141856, 563428, 6815312, 988126, 995423, 865623, 6367113, 3685631, 5520122, 3807907, 5039501, 869499, 2685071, 175920, 7007701, 3874719, 6198003, 5889564, 1649285, 211090, 3297098, 4255241, 47916, 1143478, 4037027, 2520051, 3541677, 5736886, 4074657, 4286942, 6356961, 3241355, 1099913, 48156, 6643954, 5392867, 3081571, 5331605, 5501771, 902234, 449814, 6789316, 7066909, 2414192, 4787510, 3249541, 3998103, 2636557, 3110015, 393937, 6458454, 5257572, 2003060, 4783653, 2393199, 1666752, 1781141, 3687991, 308108, 740418, 3887347, 2011281, 2863910, 3225693, 5615578, 6114210, 1766476, 4915896, 5948146, 6668739, 5458390, 2878799, 2404387, 2069719, 1863488, 3168240, 1637458, 3345008, 7008174, 4256341, 7214308, 6712736, 7090831, 96974, 3382828, 1931134, 4869342, 3930513, 5559337, 4672756, 5473496, 2349014, 2728740, 5363618, 642264, 3317924, 3711014, 5208107, 1532917, 0, 
5435016, 1273077, 3414107, 2485774, 7292959, 5770431, 3247756, 3286776, 3386365, 5068328, 5910266, 5386630, 6852941, 4615850, 4587486, 1122224, 4010873, 5621251, 2006123, 634881, 3754961, 1460718, 2772317, 558669, 296423, 5649367, 4520920, 6349780, 6462224, 3936243, 4417289, 469813, 1722297, 7320194, 6684270, 4346164, 961781, 4103981, 6185257, 4140584, 6642963, 2288596, 4904141, 7118252, 2688064, 266640, 3967076, 654243, 6149480, 5073387, 5273230, 1801295, 6929379, 1012563, 1596570, 7170523, 6075614, 5946551, 4334294, 3019070, 2004295, 6129912, 7157748, 4396192, 1768195, 4496155, 5695268, 4579620, 2382847, 4521388, 840016, 2881816, 1630817, 1688104, 321705, 2179590, 1821147, 3833758, 1801857, 1879983, 3532999, 5472819, 2934077, 1057540, 147480, 2238741, 6604214, 3060792, 509373, 1665252, 4527858, 2003303, 6657323, 2819432, 813887, 255230, 7310182, 6936002, 2829874, 2753298, 665466, 3528540, 3696732, 6506401, 6197876, 4374362, 3476863, 470267, 3681907, 5203568, 4946279, 2387125, 1572950, 2860018, 2263101, 3326880, 6503883, 2435035, 1916738, 5530876, 5628276, 4251499, 726007, 5243802, 1697998, 1195662, 6053438, 7028180, 6101569, 2494633, 5813833, 1853635, 5701914, 3568323, 1716195, 4537970, 5077191, 2385541, 2222427, 5033203, 1796684, 1759863, 448574, 3434965, 2651462, 1016347, 3782486, 6412981, 5800112, 6136160, 410904, 3211086, 6667252, 6974273, 461346, 5759090, 7037521, 6765933, 2391907, 5951578, 1749724, 5876036, 3439433, 6434280, 3940456, 1005011, 1707805, 1031702, 5905445, 1447846, 6904246, 5155719, 1194106, 6378051, 4827771, 300184, 3781544, 3555994, 891514, 6037304, 1641279, 5823691, 3678010, 6620101, 382827, 2173409, 1058873, 4517411, 3753142, 4439434, 7027111, 176838, 1666649, 6152247, 5746065, 4072826, 3277562, 4609717, 4502333, 6605534, 4141892, 4309768, 4038113, 963317, 639850, 6152426, 892912, 4763236, 6991969, 983697, 4211443, 5043205, 852066, 1160279, 1291677, 4939864, 7213489, 4487381, 3440993, 2977081, 3451805, 4496014, 3482433, 6269951, 6061293, 3467274, 5530134, 3598665, 3758682, 6440872, 1246466, 2873105, 2253894, 6661050, 7210074, 3167553, 5597765, 6388712, 5834879, 5071129, 4936365, 1166101, 2914473, 4195301, 3000745, 5724261, 2838009, 235933, 6249461, 4928529, 5965536, 1975422, 6715981, 3752369, 1846694, 0, 
2187240, 5862391, 3503287, 3108749, 7227949, 2019598, 551261, 2844907, 3111733, 5505030, 6494694, 5574092, 6377737, 643151, 5546304, 2757738, 6161685, 6874447, 5598849, 3725184, 4536090, 41139, 7280487, 1680097, 3329930, 6008801, 5096513, 1997629, 4938040, 5731971, 7229818, 5282854, 4260374, 790337, 6101838, 7294552, 164466, 4828089, 2110838, 1255109, 624147, 5559375, 5076525, 7202109, 98424, 2039700, 6128393, 7297540, 1030504, 3891802, 3694977, 452690, 127858, 6948440, 1884532, 2661303, 2823464, 2293355, 19963, 3845022, 297941, 271104, 6833148, 7129598, 6305676, 472474, 2112394, 2210525, 4040918, 788746, 3451298, 4111018, 171737, 1254155, 1638175, 2441082, 6464138, 6688588, 5618525, 1099139, 4993315, 5885102, 6703450, 5031799, 2519258, 257884, 4508914, 2346971, 2102724, 4292596, 473906, 385460, 3496940, 6766069, 6771341, 2042829, 4757488, 2438696, 3072771, 5553927, 63802, 4805703, 1137986, 3322784, 5582279, 2784250, 5629211, 1829552, 3029322, 5736662, 953093, 470232, 3742763, 7039382, 5671218, 1781414, 953411, 2150274, 4117062, 3185222, 520720, 3756883, 6612767, 7239880, 5467514, 91928, 2493015, 5987233, 1591130, 4927010, 6032209, 293374, 31233, 6743569, 6184201, 2791605, 625201, 7295108, 3994974, 6880194, 5101838, 6227904, 7160281, 4617792, 2027580, 2344273, 4099946, 354199, 2550459, 1909632, 2272803, 2745763, 1450757, 4261361, 2416335, 4220772, 2352575, 4452172, 4166837, 4898556, 6238964, 2550253, 3482549, 5229956, 6676883, 5721553, 589166, 2384367, 2158313, 1069496, 6826661, 1465336, 3248130, 2819377, 2491140, 413023, 395881, 5193313, 100630, 497064, 6077928, 828185, 1496449, 3560637, 2144373, 4623656, 4438881, 1203117, 3437160, 6272834, 2346610, 7295281, 1955263, 5941820, 6198244, 6934318, 479746, 4378618, 4492425, 1571017, 1750445, 3552584, 1967006, 503773, 6892654, 7169664, 5232391, 1546145, 6893714, 2777315, 2002571, 513773, 4717388, 2599153, 2979116, 4221264, 2426781, 2620251, 2695348, 4271757, 1896311, 3751825, 4405894, 1005033, 4988500, 2562944, 2928055, 96375, 4434048, 5374137, 5379860, 1869210, 3572301, 4361439, 3898449, 535158, 223232, 6023785, 7182902, 2472465, 370658, 3611831, 2617107, 5316607, 557206, 3277562, 3865005, 4320389, 7092188, 2067753, 7081135, 1141157, 2629988, 2224831, 3104046, 0];

        let ctildebytes: [u32; HASH_DIGEST_WIDTH] = [4443170, 2197274, 4519400, 1521216, 5704184, 4591869, 3670719, 5414562, 7312528, 1315204, 3490549, 1551551];

        let mbytes: [u32; 12] = [2593943, 3050854, 313869, 2277120, 322183, 3766436, 926546, 4056936, 3029668, 1749756, 2550234, 5875];

        let nonce: [u32; 12] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

        let comm: [u32; 24] = [4874941, 5960350, 2995492, 4893083, 491500, 1986277, 5761004, 5595047, 6310160, 3768482, 6241903, 6296282, 2838417, 6518059, 5607756, 6217506, 4820181, 2310814, 689508, 3483261, 5080667, 180176, 6752395, 1251430];

        let com_rbytes: [u32; HASH_DIGEST_WIDTH] = [0; HASH_DIGEST_WIDTH];

        let mut len: usize = 0;

        let start = Instant::now();

        let proof_bytes_ptr = prove_signature(zbytes.as_ptr(), wbytes.as_ptr(), qwbytes.as_ptr(), ctildebytes.as_ptr(), mbytes.as_ptr(), comm.as_ptr(), com_rbytes.as_ptr(), nonce.as_ptr(),  &mut len);
    
        println!("{}", verify_signature(proof_bytes_ptr, len, comm.as_ptr(), nonce.as_ptr()));

        println!("{:?}", start.elapsed());
    }
}

#[cfg(test)]
pub mod test2 {

    use super::*;

    #[test]
    fn test_merkle_proof () {

        let example_attr_u32_0: [u32; HASH_DIGEST_WIDTH] = [5324, 1251, 43534, 124235, 432241, 6436, 2341, 23523, 2525, 658965, 4583, 245389];
        let example_attr0: [BaseElement; HASH_DIGEST_WIDTH] = example_attr_u32_0.map(BaseElement::new);

        let example_attr_u32_1: [u32; HASH_DIGEST_WIDTH] = [1651613, 75257, 753, 8237, 72753, 73257, 237341, 823523, 52525, 6965, 47583, 24589];
        let example_attr1: [BaseElement; HASH_DIGEST_WIDTH] = example_attr_u32_1.map(BaseElement::new);

        let example_attr_u32_2: [u32; HASH_DIGEST_WIDTH] = [142, 27537, 3, 77, 38, 373, 8383, 352, 78973, 453, 8736, 6378];
        let example_attr2: [BaseElement; HASH_DIGEST_WIDTH] = example_attr_u32_2.map(BaseElement::new);

        let mut cert0: Vec<[BaseElement; HASH_DIGEST_WIDTH]> = vec![];

        cert0.push(example_attr0);
        cert0.push(example_attr1);
        for _i in 1..16 {
            cert0.push(example_attr1);
            cert0.push(example_attr2);
        }

        let mut cert1: Vec<[BaseElement; HASH_DIGEST_WIDTH]> = vec![];

        cert1.push(example_attr0);
        cert1.push(example_attr2);
        for _i in 1..16 {
            cert1.push(example_attr2);
            cert1.push(example_attr1);
        }

        let mut cert2: Vec<[BaseElement; HASH_DIGEST_WIDTH]> = vec![];

        //This cert has different first attr.
        cert2.push(example_attr1);
        cert2.push(example_attr2);
        for _i in 1..16 {
            cert2.push(example_attr2);
            cert2.push(example_attr1);
        }

        let comm0_u32: [u32; HASH_RATE_WIDTH] = [6884464, 5796844, 4915403, 2685788, 1262740, 3133087, 444436, 6212006, 87333, 4752267, 4358664, 1173227, 2700755, 1797861, 5710232, 4480878, 6943763, 3941100, 1628521, 1965981, 4655992, 3329326, 7315964, 2391907];
        let comm0: [BaseElement; HASH_RATE_WIDTH] = comm0_u32.map(BaseElement::new);

        let comm1_u32: [u32; HASH_RATE_WIDTH] = [4016868, 378337, 5062150, 4000076, 6430762, 3871076, 6667880, 1309979, 2049965, 1774621, 1990321, 487812, 5976654, 6942105, 6459281, 5965486, 593837, 854088, 917276, 4519014, 134229, 3265489, 268717, 1977970];
        let comm1: [BaseElement; HASH_RATE_WIDTH] = comm1_u32.map(BaseElement::new);

        let comm2_u32: [u32; HASH_RATE_WIDTH] = [810421, 5657095, 6187730, 6252613, 6566569, 4835895, 2074026, 2107415, 5629227, 681991, 855972, 2574051, 1906283, 2526605, 1827260, 1515521, 1603600, 6621959, 3468030, 398881, 5983142, 1734108, 1357845, 1208531];
        let comm2: [BaseElement; HASH_RATE_WIDTH] = comm2_u32.map(BaseElement::new);

        let nonce0: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ONE; HASH_DIGEST_WIDTH];
        let nonce1: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO, BaseElement::ONE, BaseElement::ONE, BaseElement::ONE, BaseElement::ZERO, BaseElement::ONE, BaseElement::ONE, BaseElement::ONE, BaseElement::ZERO, BaseElement::ONE, BaseElement::ONE, BaseElement::ONE];
        //let nonce2: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ONE; HASH_DIGEST_WIDTH];

        let mut cert_list: Vec<Vec<[BaseElement; HASH_DIGEST_WIDTH]>> = vec![cert0.clone(), cert1.clone()];
        let mut comms = vec![comm0.clone(), comm1.clone()];
        let mut nonces = vec![nonce0.clone(), nonce1.clone()];
        let mut num_of_attributes = vec![cert0.len(), cert1.len()];

        //It is assumed that disclosed indices are soreted
        let disclosed_indices: Vec<Vec<usize>> = [[2, 4, 5, 6, 7, 13, 15].to_vec(), [3, 7, 24, 28].to_vec()].to_vec();
        //[9, 11, 12, 13, 14].to_vec()

        let mut disclosed_attributes: Vec<Vec<[BaseElement; HASH_DIGEST_WIDTH]>> = Vec::new();
        for i in 0..disclosed_indices.len() {
            disclosed_attributes.push(Vec::new());
            for j in 0..disclosed_indices[i].len() {
                disclosed_attributes[i].push(cert_list[i][disclosed_indices[i][j]]);
            }
        }

        let mut start = Instant::now();

        let proof = merklepf::prove(cert_list.clone(), disclosed_indices.clone(), comms.clone(), nonces.clone());
        println!("{:?}", start.elapsed());
        let proof_bytes = proof.to_bytes();
        println!("Proof size: {:.1} KB", proof_bytes.len() as f64 / 1024f64);
        println!("Proof security: {} bits", proof.security_level(true));
        start = Instant::now();
        match merklepf::verify(proof.clone(), disclosed_attributes.clone(), disclosed_indices.clone(), num_of_attributes.clone(), comms.clone(), nonces.clone()) {
            Ok(_) => {
                println!("Verified.");
            },
            Err(msg) => 
            {
                println!("Failed to verify proof: {}", msg);
            }
        }
        println!("{:?}", start.elapsed());
        cert_list[1] = cert2;
        comms[1] = comm2;
        let proof2 = merklepf::prove(cert_list.clone(), disclosed_indices.clone(), comms.clone(), nonces.clone());
        match merklepf::verify_with_wrong_inputs(proof2.clone(), disclosed_attributes.clone(), disclosed_indices.clone(), num_of_attributes, comms, nonces) {
            Ok(_) => {
                println!("This should have failed.");
            },
            Err(msg) => 
            {
                println!("Failed successfully: {}", msg);
            }
        }
    }
}