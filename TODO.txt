Első körben a proof annyi lesz, hogy ismeri az attribútum hash-ét a tulajdonos, és felépíthető a fa.

issuer.go
    - proveSignature sztem kidobható
    - Context még nem tudom mire való, valsyeg vmi ID, inkább mint context


- There will be no revocation feature in the beginning

- We don't have blind signature, therefore we put more trust in the Issuer, but i am guessing the Issuers should be trusted anyways.

Valószínüleg rosszul használom a poseidon hash-t. a capacityvel sose foglalkozok.

Kell számolnom tovább a hash-et ha már úgyis csak a padded rész van?

proofU - proof of correctness of the commitment in the first phase of the issuance protocol. Commitment to attributes (we don't support keyshares and we didnt include a commitment yet to the user secret i think, however latter is easy)
proofS - proof of signature - zkDil
proofD - zkp for disclosed attributes
proofP - keyshare server's knowledge of its part of the secret key.

TODO In our case the proofU is the merkle tree stark that we are making.

proof-ot újraimplementálni
prooflist-et újraimplementálni
buildert újraimplementálni
credential-t újraimplementálni

for now the issues is fully trusted, we will send the first attribute aswell.

a merkle fa gyökerét kell aláírnia.

A mi esetünkben a credential disclosureProof nem feltétlen egy credentialból áll, jöhetnek többől is attribúrumok és olyankor nem választhatjuk külön a buildert minden credhez, hanem egybe kell dolgozni




right now we disclose attributes, prove that they are part of the merkle tree, to which we commit to.

then we prove that the merkle tree root was signed

we need to make a new proof each time for both to keep indistinguishability