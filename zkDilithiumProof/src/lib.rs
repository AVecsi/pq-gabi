use winterfell::math::{fields::f23201::BaseElement, FieldElement};
use winterfell::StarkProof;
use std::io::Write;

mod starkpf;
mod merklepf;
mod utils;

use crate::utils::poseidon_23_spec::{
    DIGEST_SIZE as HASH_DIGEST_WIDTH,
    RATE_WIDTH as HASH_RATE_WIDTH
};

use crate::starkpf::{N, K};

use std::ffi::CStr;
use std::ptr;
use std::slice;
use std::time::{Duration, Instant};

#[no_mangle]
pub extern "C" fn prove_signature(z_ptr: *const u32, w_ptr: *const u32, qw_ptr: *const u32, ctilde_ptr: *const u32, m_ptr: *const u32, comm_ptr: *const u32, comr_ptr: *const u32, nonce_ptr: *const u32, out_proof_bytes_len: *mut usize) -> *const u8 {

    //For now lets just assume that the input's length is ok
    //Convert from the C bytes to something rust readable
    let mut z: [[BaseElement; N]; K] = [[BaseElement::ZERO; N]; K];
    let mut w: [[BaseElement; N]; K] = [[BaseElement::ZERO; N]; K];
    let mut qw: [[BaseElement; N]; K] = [[BaseElement::ZERO; N]; K];
    let mut ctilde: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    let mut m: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    let mut comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
    let mut com_r: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];

    unsafe {
        for i in 0..K {
            for j in 0..N {
                z[i][j] = BaseElement::new(*(z_ptr.add(i*N+j)));
                w[i][j] = BaseElement::new(*(w_ptr.add(i*N+j)));
                qw[i][j] = BaseElement::new(*(qw_ptr.add(i*N+j)));
            }
        }



        for i in 0..HASH_DIGEST_WIDTH {
            ctilde[i] = BaseElement::new(*(ctilde_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            m[i] = BaseElement::new(*(m_ptr.add(i)));
        }

        for i in 0..HASH_RATE_WIDTH {
            comm[i] = BaseElement::new(*(comm_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            com_r[i] = BaseElement::new(*(comr_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            nonce[i] = BaseElement::new(*(nonce_ptr.add(i)));
        }
    }
    let proof_bytes = starkpf::prove(z, w, qw, ctilde, m, comm, com_r, nonce).to_bytes();

    unsafe {
        *out_proof_bytes_len = proof_bytes.len();
    }

    return &proof_bytes[0]
}

#[no_mangle]
pub extern "C" fn verify_signature(proof_bytes_ptr: *const u8, proof_bytes_len: usize, comm_ptr: *const u32, nonce_ptr: *const u32) -> u32 {

    let proof = StarkProof::from_bytes(unsafe {slice::from_raw_parts(proof_bytes_ptr, proof_bytes_len)}).unwrap();
    let mut comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
    let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
    unsafe {
        for i in 0..HASH_RATE_WIDTH {
            comm[i] = BaseElement::new(*(comm_ptr.add(i)));
        }

        for i in 0..HASH_DIGEST_WIDTH {
            nonce[i] = BaseElement::new(*(nonce_ptr.add(i)));
        }
    }

    match starkpf::verify(proof.clone(), comm, nonce) {
        Ok(_) => {
            println!("Verified.");
            return 1;
        },
        Err(msg) => 
        {
            println!("Failed to verify proof: {}", msg);
            return 0;
        }
    }
}

#[no_mangle]
pub extern "C" fn prove_attributes(num_of_certs: usize, cert_list_ptr: *const u32, num_of_attributes: *const usize, disclosed_indices_ptr: *const usize, num_of_disclosed_indices: *const usize, merkle_commitments_ptr: *const u32, secret_commitment_ptr: *const u32, nonces_ptr: *const u32, secret_nonce_ptr: *const u32, out_proof_bytes_len: *mut usize) -> *const u8 {

    let mut cert_list = Vec::new();
    let mut disclosed_indices= Vec::new();
    let mut merkle_comms = Vec::new();
    let mut secret_comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
    let mut nonces = Vec::new();
    let mut secret_nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];

    let mut attributes_counter = 0;
    let mut disclosed_indeces_counter = 0;

    for i in 0..num_of_certs {
        cert_list.push(Vec::new());
        let current_num_of_attributes = unsafe{*num_of_attributes.add(i)};
        for j in 0..current_num_of_attributes {
            let mut attribute: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
            for k in 0..HASH_DIGEST_WIDTH {
                attribute[k] = BaseElement::new(unsafe{*cert_list_ptr.add(attributes_counter*HASH_DIGEST_WIDTH+j*HASH_DIGEST_WIDTH+k)});
            }
            cert_list[i].push(attribute);
        }
        attributes_counter += current_num_of_attributes;

        disclosed_indices.push(Vec::new());
        let current_num_of_disclosed_indices = unsafe{*num_of_disclosed_indices.add(i)};
        for j in 0..current_num_of_disclosed_indices {
            disclosed_indices[i].push(unsafe{*disclosed_indices_ptr.add(disclosed_indeces_counter+j)});
        }
        disclosed_indeces_counter += current_num_of_disclosed_indices;

        let mut merkle_comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
        for j in 0..HASH_RATE_WIDTH {
            merkle_comm[j] = BaseElement::new(unsafe{*merkle_commitments_ptr.add(i*HASH_RATE_WIDTH+j)});
        }
        merkle_comms.push(merkle_comm);

        let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
        for j in 0..HASH_DIGEST_WIDTH {
            nonce[j] = BaseElement::new(unsafe{*nonces_ptr.add(i*HASH_DIGEST_WIDTH+j)});
        }
        nonces.push(nonce);
    }

    for j in 0..HASH_RATE_WIDTH {
        secret_comm[j] = BaseElement::new(unsafe{*secret_commitment_ptr.add(j)});
    }

    for j in 0..HASH_DIGEST_WIDTH {
        secret_nonce[j] = BaseElement::new(unsafe{*secret_nonce_ptr.add(j)});
    }
    
    let proof_bytes = merklepf::prove(cert_list.clone(), disclosed_indices.clone(), merkle_comms.clone(), secret_comm,  nonces.clone(), secret_nonce).to_bytes();

    unsafe {
        *out_proof_bytes_len = proof_bytes.len();
    }

    return &proof_bytes[0]
}

#[no_mangle]
pub extern "C" fn verify_attributes(proof_bytes_ptr: *const u8, proof_bytes_len: usize, num_of_certs: usize, disclosed_attributes_ptr: *const u32, num_of_disclosed_attributes: *const usize, disclosed_indices_ptr: *const usize, num_of_attributes_ptr: *const usize, merkle_commitments_ptr: *const u32, secret_commitment_ptr: *const u32, nonces_ptr: *const u32, secret_nonce_ptr: *const u32) -> u32 {

    let proof = StarkProof::from_bytes(unsafe {slice::from_raw_parts(proof_bytes_ptr, proof_bytes_len)}).unwrap();

    let mut disclosed_attributes = Vec::new();
    let mut disclosed_indices= Vec::new();
    let mut num_of_attributes = Vec::new();
    let mut merkle_comms = Vec::new();
    let mut secret_comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
    let mut nonces = Vec::new();
    let mut secret_nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];

    let mut disclosed_attributes_counter = 0;

    for i in 0..num_of_certs {
        disclosed_attributes.push(Vec::new());
        disclosed_indices.push(Vec::new());
        let current_num_of_disclosed_attributes = unsafe{*num_of_disclosed_attributes.add(i)};
        for j in 0..current_num_of_disclosed_attributes {
            let mut attribute: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
            for k in 0..HASH_DIGEST_WIDTH {
                attribute[k] = BaseElement::new(unsafe{*disclosed_attributes_ptr.add(disclosed_attributes_counter*HASH_DIGEST_WIDTH+j*HASH_DIGEST_WIDTH+k)})
            }
            disclosed_attributes[i].push(attribute);

            disclosed_indices[i].push(unsafe{*disclosed_indices_ptr.add(disclosed_attributes_counter+j)});
        }
        disclosed_attributes_counter += current_num_of_disclosed_attributes;

        num_of_attributes.push(unsafe {*num_of_attributes_ptr.add(i)});

        let mut merkle_comm: [BaseElement; HASH_RATE_WIDTH] = [BaseElement::ZERO; HASH_RATE_WIDTH];
        for j in 0..HASH_RATE_WIDTH {
            merkle_comm[j] = BaseElement::new(unsafe{*merkle_commitments_ptr.add(i*HASH_RATE_WIDTH+j)});
        }
        merkle_comms.push(merkle_comm);

        let mut nonce: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO; HASH_DIGEST_WIDTH];
        for j in 0..HASH_DIGEST_WIDTH {
            nonce[j] = BaseElement::new(unsafe{*nonces_ptr.add(i*HASH_DIGEST_WIDTH+j)});
        }
        nonces.push(nonce);
    }

    for j in 0..HASH_RATE_WIDTH {
        secret_comm[j] = BaseElement::new(unsafe{*secret_commitment_ptr.add(j)});
    }

    for j in 0..HASH_DIGEST_WIDTH {
        secret_nonce[j] = BaseElement::new(unsafe{*secret_nonce_ptr.add(j)});
    }

    match merklepf::verify(proof.clone(), disclosed_attributes.clone(), disclosed_indices.clone(), num_of_attributes.clone(), merkle_comms.clone(), secret_comm, nonces.clone(), secret_nonce) {
        Ok(_) => {
            println!("Verified.");
            return 1;
        },
        Err(msg) => 
        {
            println!("Failed to verify proof: {}", msg);
            return 0;
        }
    }
}

//#[cfg(test)]
/* pub mod test1 {

    use std::ffi::CString;
    use super::*;
    use libc::c_uchar;
    use libc::c_uint;

    // This is meant to do the same stuff as the main function in the .go files
    #[test]
    fn simulated_main_function () {
        let zbytes: [u32; N*4] = [
            15410, 104265, 41727, 38456, 64801, 41158, 7278700, 7251399, 29510, 7253867, 104191, 24806, 7254022, 127186, 7271682, 7264647, 7256470, 7299544, 7230360, 7297996, 7301086, 120782, 7267193, 50546, 7234736, 7271379, 19032, 94563, 7269988, 7234772, 109863, 7266174, 7330245, 87645, 128831, 7305781, 63841, 12342, 19824, 7244855, 7232878, 51677, 7272898, 7212134, 7265242, 7291215, 7334514, 122895, 7309438, 7317235, 61730, 106208, 7291253, 7226146, 75836, 30607, 7215185, 7277036, 7260819, 100949, 7317053, 88716, 7266820, 7272766, 7217917, 126469, 7316092, 7296043, 39394, 7224474, 7307615, 31133, 7274839, 7284192, 7255704, 7339297, 7235983, 36019, 7275847, 7271357, 121782, 7318631, 128762, 7294567, 7277525, 25693, 7263812, 106860, 7280851, 7224801, 7301061, 104494, 7297870, 7270004, 7291099, 48205, 79126, 72949, 40258, 7336743, 7303779, 7289343, 7338626, 7327596, 7281001, 76832, 7218170, 13413, 55357, 7325773, 7274278, 7302327, 7285288, 45388, 7314683, 7285453, 7222351, 100095, 41055, 115244, 67969, 7286575, 7249889, 27703, 7228937, 7251898, 7320355, 7279061, 7293912, 25318, 37118, 7229784, 112055, 4948, 7230270, 7335614, 7211604, 7293584, 53847, 7262390, 126371, 33007, 104299, 80691, 7256500, 7318790, 120567, 127722, 7215352, 70486, 7306479, 45997, 7259812, 7243294, 100650, 7334172, 17462, 82533, 7216526, 7285341, 7339187, 7269370, 7318042, 48215, 7297174, 7288925, 100266, 7328970, 31248, 130083, 92406, 112071, 70474, 7255990, 70493, 96741, 7339670, 7228753, 7241507, 84316, 126685, 7330437, 31210, 7272670, 96788, 7296798, 87511, 18883, 2247, 119360, 7248998, 118646, 7334107, 7296567, 7335038, 7274544, 80402, 35925, 45079, 41122, 105975, 91318, 7247854, 107225, 113783, 7867, 95808, 38935, 62957, 7229548, 7293980, 115486, 11444, 7266217, 7242976, 7333047, 7290969, 7304271, 7293362, 13400, 7212677, 127578, 59986, 7242677, 7338104, 8449, 7826, 10784, 129557, 112963, 82785, 81827, 57009, 7335501, 10025, 7256454, 5631, 17028, 7215801, 38534, 3110, 7307637, 7285011, 11651, 7276681, 7279753, 7265931, 19938, 40919, 107900, 42018, 7225377, 126821, 72730, 7225479, 62566,
    88120, 91311, 68582, 7312790, 7298701, 91941, 7238447, 30386, 68958, 7280611, 74313, 56908, 46504, 7270034, 7209050, 7255154, 7299547, 54641, 130805, 58234, 7218992, 7221817, 7244496, 7266975, 70051, 7306416, 7435, 7220265, 7231878, 15393, 7303835, 56101, 7279103, 7302059, 7237654, 116225, 43069, 28749, 109601, 7300112, 30165, 129688, 44472, 7314744, 7264507, 7273771, 36624, 7316733, 80412, 123710, 56713, 89908, 86150, 7335288, 44933, 90333, 114541, 4489, 125492, 92092, 129371, 7314585, 7294590, 7254768, 64266, 7260750, 16771, 61695, 47162, 107596, 25538, 7232924, 35383, 97158, 122739, 7218889, 7297898, 7319032, 88644, 7297078, 7218017, 7286147, 7264549, 20885, 128785, 7311703, 94946, 7252590, 7337382, 7330582, 69581, 52724, 110853, 6186, 114653, 30077, 7332874, 29970, 74675, 128914, 120954, 125287, 25741, 100517, 7275261, 7285803, 6109, 58209, 7272347, 67365, 7296203, 32575, 26748, 83293, 7231436, 127356, 22996, 53383, 7233418, 93020, 68181, 7253906, 30803, 7321477, 7337659, 51157, 7295373, 7274396, 7335895, 7311931, 7250460, 58414, 104124, 104467, 7327893, 7231444, 71361, 7288794, 7292671, 7337660, 101446, 92732, 95543, 7285141, 7221300, 91884, 130810, 7273266, 7317795, 7220552, 21614, 7309915, 7220618, 27615, 7220493, 43827, 7334246, 87038, 7259541, 68604, 7241277, 65756, 7330728, 7230789, 7257276, 7298041, 25199, 7215541, 7228653, 24405, 90981, 78527, 124808, 8345, 104451, 7306508, 7299169, 7218527, 7282205, 7257740, 7283981, 7309172, 7240982, 14363, 7284378, 7291902, 5516, 321, 7217932, 7274414, 7225111, 38919, 7268910, 7300170, 7229309, 7321266, 120234, 63482, 7211377, 35252, 73388, 7285233, 7303420, 7329253, 80686, 7315995, 7220801, 18604, 7302336, 725, 2863, 7290482, 7266325, 108359, 22774, 7246137, 7240049, 7218722, 34939, 7245393, 1270, 7285010, 79852, 7224715, 7233870, 7338461, 7306171, 7275595, 7217337, 100143, 7248450, 7225814, 7280912, 7288479, 48907, 7302406, 58096, 7305709, 7220742, 7260609, 7237666, 127396, 33356, 42640, 7265838, 64151, 82939, 7266041, 50801, 82896, 120330, 67636, 7268645, 7263861, 7308611, 50221,
    45677, 93328, 7253834, 15308, 75790, 7318542, 89313, 126867, 7335918, 61538, 126931, 83643, 9598, 7276800, 7231491, 47702, 7246942, 100486, 109647, 82430, 7254865, 7247149, 125889, 86088, 7282950, 7260182, 72671, 2618, 7213052, 7335780, 7336494, 54418, 78343, 113128, 7312114, 7232606, 7293225, 79835, 68083, 7290583, 7262269, 5536, 74016, 7306797, 115238, 92775, 38464, 7310207, 96256, 7333390, 66412, 7335572, 11792, 97359, 7308145, 7246066, 7338427, 7227558, 37654, 7257339, 17101, 48332, 7247017, 59474, 7256472, 90687, 7221735, 7295716, 5261, 99546, 103115, 85336, 7330244, 7266865, 80023, 7267223, 7263074, 7297677, 7319347, 91515, 7312284, 70426, 7271372, 7238423, 7286745, 118052, 76332, 96637, 57245, 10878, 7491, 90500, 45460, 7333091, 7327309, 4292, 1371, 23848, 7266702, 7296036, 2467, 90482, 22036, 7212538, 7258805, 7256908, 7286501, 8731, 7260341, 5929, 73032, 98657, 76903, 7300165, 39557, 34607, 41382, 7225940, 7266132, 47002, 7240726, 7287005, 7248118, 7314001, 124988, 7278000, 7259716, 33430, 70779, 84209, 99796, 7227107, 7286823, 7219436, 7251755, 51362, 71148, 38626, 7282205, 7253417, 88621, 106997, 7223844, 7226488, 121467, 86936, 7254581, 47229, 66875, 7321517, 7272216, 72277, 7305418, 112090, 17209, 7240568, 123396, 8571, 7263488, 2619, 9054, 66266, 122076, 94538, 7331131, 7226347, 7305993, 95186, 71298, 128457, 99202, 7331556, 7288337, 7285243, 87415, 7314670, 5994, 7288998, 7322458, 7333364, 102177, 126629, 68507, 50515, 4464, 68942, 17021, 7299974, 7295752, 7217886, 7223258, 7325602, 43430, 7249126, 7274129, 87213, 3692, 7322886, 7289248, 86690, 3525, 7313163, 6843, 7257190, 7231662, 7243503, 46238, 90219, 7216107, 7234038, 7221755, 7329322, 123774, 124911, 20262, 7243668, 49837, 7249068, 7316223, 52896, 7291024, 7290486, 7211812, 116517, 13476, 7325315, 27731, 56314, 20565, 7297466, 101478, 41562, 7238077, 7325632, 25461, 120884, 7338946, 7310281, 78246, 31800, 66954, 27473, 7318587, 64075, 7292641, 1260, 7211798, 119586, 7224250, 7297131, 116085, 103736, 7235620, 7328561, 7232443, 7270701,
    61379, 7334031, 7314234, 13499, 108327, 77340, 7257718, 76705, 7315058, 91067, 7328833, 7263644, 100428, 7274339, 32215, 7300996, 7320557, 7296628, 117362, 7251815, 119710, 7247439, 7321393, 7322209, 7333217, 25399, 7296404, 7262223, 9270, 29414, 7222762, 7294538, 32566, 82516, 98330, 7283438, 7310784, 7335537, 7226324, 7293474, 7257925, 93388, 70124, 91396, 7287535, 30808, 21661, 84485, 75127, 950, 87592, 50079, 35297, 124686, 7303645, 7249667, 98127, 7257783, 7289663, 45121, 70242, 7236354, 7338863, 92367, 7268420, 7305177, 33369, 64935, 31415, 7337204, 85091, 40940, 7262459, 7214205, 7291181, 36019, 7271105, 55958, 7325251, 76465, 7325071, 19168, 7235975, 106417, 7215113, 19828, 81078, 38087, 7216481, 7297503, 7228719, 44115, 7235302, 7332097, 109396, 72696, 7278878, 57699, 24948, 7232438, 7221527, 101814, 92723, 6889, 7227320, 7274185, 7231410, 7230707, 30181, 103207, 7258554, 7313985, 54474, 7295938, 7236738, 7214626, 18744, 14067, 7226435, 124518, 7287535, 7320271, 68928, 7288031, 7269352, 117397, 11159, 96113, 7209925, 7229083, 36218, 39918, 79450, 66455, 50643, 7300485, 7313418, 128892, 40398, 117627, 7282365, 7308663, 23523, 78488, 7267939, 26752, 7216807, 11927, 7226575, 96324, 7211891, 34642, 20684, 123834, 49602, 42254, 7235782, 100335, 7223671, 7241654, 128276, 110763, 57927, 7223203, 66906, 84454, 7223647, 79243, 7440, 92070, 101880, 51640, 39965, 124970, 51657, 7303063, 55538, 7272064, 114166, 92594, 7334974, 60304, 51777, 7249226, 7244359, 7258264, 4366, 75614, 7243701, 44592, 10166, 7315979, 113021, 7334938, 5081, 25703, 7264400, 123482, 17187, 7292606, 7313295, 7225433, 11809, 7314337, 4610, 7222195, 7332778, 7248209, 7211080, 7271097, 114315, 90087, 7259342, 4709, 97426, 104946, 7268158, 7334001, 7337775, 7213607, 7325512, 127251, 7245186, 27975, 18568, 7262397, 18658, 1247, 7281195, 96224, 7213464, 93438, 7316032, 30882, 7316964, 7266683, 7334551, 7337174, 7337584, 90558, 104774, 7291209, 38243, 7258604, 4457, 82431, 7244737, 7329858, 7335233, 94591, 7308852, 118396, 7328096, 50001, 7223141, 7306513
        ];

        let wbytes: [u32; N*4] = [
            2307644, 6400428, 5016361, 1736509, 4638619, 4712265, 5223943, 6829095, 1149652, 5034844, 6236725, 3028847, 1081343, 6954737, 4340566, 3803754, 4537673, 6162220, 499567, 3092944, 1630381, 695571, 249033, 3145741, 5385542, 6767477, 4696892, 3673684, 4440158, 2863906, 4829041, 3345346, 2172750, 809440, 4737868, 1800899, 3958212, 4003235, 4693317, 1033355, 1316202, 3186994, 2258360, 4163940, 3459080, 7301545, 3743532, 3172120, 306003, 3989665, 425023, 4328623, 6075116, 3170683, 1552501, 4676615, 5012974, 5113207, 1611729, 24658, 4160830, 1863628, 5076407, 2433656, 3745573, 4040934, 1361804, 3819311, 5613629, 3663559, 4273153, 5330538, 4046664, 713647, 1174974, 4938332, 2359820, 1897847, 3346780, 3466305, 5182208, 3038528, 1590610, 880325, 4312319, 1254898, 2650733, 741920, 7084733, 30635, 658250, 6612672, 1696697, 5236249, 4090347, 3898706, 4768375, 2443445, 456419, 3462679, 1909914, 5914764, 6296413, 3581292, 7206120, 3061369, 2880864, 6139609, 1389617, 1857904, 1004625, 7073903, 5964196, 3331558, 7278141, 1722340, 2221108, 5918930, 4387731, 3707704, 6007959, 5037635, 7225934, 2195019, 3389908, 859565, 4977419, 2711771, 2536494, 6723298, 2018959, 4657622, 4798243, 5286459, 5549567, 5303484, 4058890, 937363, 1252139, 3850148, 4676788, 3482457, 5856768, 6512995, 3724347, 689044, 1553803, 5595439, 3379639, 1472410, 1154947, 2600898, 5319818, 355292, 1618560, 2573354, 4357360, 2802089, 548674, 4973487, 2660915, 1308674, 6033727, 5678855, 889681, 4307307, 4436797, 6298669, 5444718, 4834097, 1941564, 1205669, 4031617, 857840, 3851590, 4535230, 5420446, 3126063, 6463368, 2436633, 1985478, 3834597, 5340992, 2318346, 1873748, 5718185, 2497597, 321163, 6320430, 3337899, 1415800, 2918937, 6247680, 5947338, 5318860, 3186067, 575063, 5059346, 3301609, 3598729, 1059302, 6877326, 396491, 1389914, 784132, 2669501, 7069263, 32533, 4212193, 1015292, 6068685, 5168839, 3386024, 5754765, 777301, 4812579, 4901374, 6099012, 2527661, 3854329, 4661174, 5131810, 4088020, 3790743, 5258206, 3058679, 5806423, 2431943, 2979807, 4928439, 4772125, 2911588, 52101, 7240346, 5970296, 5423043, 5507521, 2970009, 6363692, 5618178, 2569758, 3369028, 5788120, 2512288, 6183189, 5058876, 288662, 710062, 6586414, 5294944, 5823061, 97834, 5189005, 1774807, 5288804, 805060,
998806, 5460639, 2031755, 6787947, 4839946, 4637984, 4650414, 4490771, 7082898, 3797087, 1743928, 2517606, 2086429, 584075, 4798662, 1848918, 887828, 2694142, 1699322, 7013188, 7258569, 801757, 1074674, 215430, 6563743, 483935, 6891955, 6304196, 7271378, 567946, 4697776, 1630396, 1224718, 3213494, 3592477, 5795935, 89677, 7108324, 1901684, 6300430, 823087, 6691868, 7286909, 3706032, 5903185, 2169938, 912283, 3647671, 1377814, 3614219, 4716153, 1052883, 6015366, 6951951, 565446, 3816137, 2254736, 3551515, 4827100, 4980657, 6373667, 6265232, 4859122, 6032049, 2767638, 3366725, 1296856, 2735852, 4403297, 1798818, 7062048, 5468410, 489451, 6101073, 2023380, 1145418, 4859370, 3656865, 59666, 6633009, 3541554, 5134829, 1220271, 5590761, 3066516, 3431553, 2412852, 3655735, 535934, 591055, 4332581, 726116, 7072547, 1114120, 527403, 5731318, 1081050, 5099431, 6818539, 591093, 224672, 49058, 6859062, 5171150, 5225526, 6292955, 7106425, 3168196, 314977, 5517068, 631289, 3763262, 5910940, 4179187, 4520033, 1210257, 2693229, 356098, 5431368, 2899101, 3799711, 1056503, 3123921, 1310799, 2929776, 219512, 1155803, 7306367, 942921, 1911795, 3655731, 308026, 6660355, 2292021, 1878315, 7294364, 5285835, 2593478, 3386859, 2081332, 1854971, 3725883, 1389400, 2313944, 7012823, 4215664, 6791051, 5385384, 1449729, 3946701, 5900526, 2816527, 3675069, 2357100, 540951, 1902941, 6812773, 2681369, 3543174, 3140424, 6706629, 4119540, 7159598, 3541000, 1632575, 1308538, 6630932, 1883429, 1282722, 4255049, 1130085, 2704995, 881342, 5656947, 5046826, 6628256, 2342822, 6681047, 2241678, 3267352, 4064807, 2504587, 5347477, 3490271, 3241765, 5629866, 6698508, 2856566, 5809266, 6607398, 685056, 1140108, 1664332, 4609263, 6826416, 5534780, 4720196, 2142409, 1297607, 5920546, 1490953, 5129161, 3160266, 2420083, 1895658, 2998481, 1185226, 2191457, 502840, 129796, 2913393, 2689448, 5432411, 3346738, 1203329, 720259, 3546742, 281896, 1829908, 3722152, 3698298, 4525646, 62890, 5115067, 32495, 5006752, 4428154, 5916910, 4751099, 6245937, 1905269, 927310, 6251974, 1388482, 1739742, 7116991, 4621362, 1231693, 4749784, 6728719, 1078505, 2002792, 1669824, 3825604, 1908189, 4564515, 7246214, 6909033, 6845458, 4776675, 6549641, 4095031, 1656475, 4670851, 7243029, 2629617,
596415, 1930230, 5541689, 1542329, 7228729, 5556438, 190664, 7199038, 146170, 3514179, 6528989, 5161472, 464987, 6963833, 6882654, 2916647, 2837287, 4393984, 2733815, 6452831, 7324649, 1191061, 7137927, 3368262, 5618131, 7269157, 2353155, 4569982, 3917599, 7320325, 3796394, 3043760, 5926065, 6970952, 1101071, 6068833, 6150347, 1015682, 4441818, 634221, 982831, 5267302, 6223072, 1304319, 2388454, 7027864, 6797183, 3545451, 7223745, 1701395, 7131349, 5390925, 6207910, 5938223, 2914800, 2158141, 6694679, 5403685, 4730155, 3300549, 1291439, 5931988, 761175, 5315336, 1393600, 6633425, 4104299, 2701248, 1922558, 1775153, 2675892, 6806089, 412158, 6764475, 2261503, 4707947, 5588253, 117983, 6787301, 766053, 2035692, 2633588, 1021009, 676387, 6327387, 4224655, 6465782, 6582726, 3558021, 2959156, 5892932, 6422279, 6376981, 3653015, 4529930, 4847692, 6288927, 5753139, 3987761, 2886553, 5623538, 3098315, 3390768, 1463379, 6211272, 5452664, 5492778, 1615379, 4640994, 6174764, 1599956, 1913715, 1368991, 3152339, 1936524, 3881444, 887159, 1223983, 2060965, 5356956, 1265554, 6118566, 2018040, 518322, 6873098, 5266719, 1508298, 5562733, 2753731, 2918282, 3027728, 4331925, 2386477, 6697892, 7333765, 3938292, 4734608, 5211682, 7244308, 4755054, 1219642, 6903630, 185557, 3328563, 856995, 6577561, 4132723, 633727, 7145476, 5143693, 530192, 5557632, 6420532, 872573, 4239918, 224520, 894210, 6916212, 4221830, 4762336, 4705278, 7246172, 1891827, 5867368, 6433638, 61918, 3432881, 4246986, 148038, 4182555, 2783473, 6230780, 6761081, 1778409, 6777605, 2855393, 941213, 5638210, 964395, 6937199, 5746901, 365346, 507295, 5415305, 5654072, 1490654, 1082746, 67844, 2098869, 2811190, 3315137, 6653296, 4671209, 1613002, 5850222, 2074467, 4607820, 6865276, 5526716, 6162577, 225526, 110479, 1203096, 6305703, 1047722, 7057373, 3395565, 4273119, 258677, 4262265, 2194539, 2967982, 4240480, 5676728, 4803870, 5183848, 816601, 3731179, 6750112, 1844285, 4271519, 3833777, 2134952, 5385539, 495640, 1973540, 5743503, 4471277, 2050161, 5960548, 7008951, 4023682, 6651835, 6373846, 4967507, 3304660, 45662, 3592506, 1146570, 5809285, 2427372, 2341487, 2560741, 1027260, 559381, 6030006, 2692132, 3415514, 1352698, 5633348, 6617505, 5563530, 1402862, 4521745, 662962, 2385673,
2768132, 884509, 2311962, 3321335, 393969, 3653964, 2611674, 1894689, 2440036, 2169230, 5192791, 6468452, 219212, 3880915, 6892004, 1149034, 6043474, 6004163, 5435752, 6611721, 4922641, 2229398, 6686630, 2968016, 5793625, 7273938, 751580, 743081, 1062397, 367386, 3320625, 4944974, 4559690, 6715512, 4111970, 5303754, 3836049, 2948658, 6027850, 171786, 1605223, 6856879, 1831046, 2701555, 5699876, 1023964, 2011499, 5357421, 4812210, 4987885, 6146401, 4902107, 2434788, 4837713, 872467, 6038719, 2472101, 8956, 5821065, 1478783, 5265135, 3922923, 966940, 4231569, 6635701, 2264400, 2842123, 5900185, 3650011, 6449817, 6197591, 3437038, 1882834, 2852763, 6879038, 7321090, 6135785, 3404248, 808590, 3276408, 4580218, 5186044, 1964429, 6825111, 4625709, 3861094, 2628863, 5675668, 2595510, 6997194, 3766793, 4688371, 4869576, 6129498, 649829, 5639657, 4790880, 5107755, 4877300, 2687836, 6928894, 941122, 4875554, 6599110, 357821, 2321498, 5397154, 4649498, 2686840, 893232, 5810234, 3606641, 4424280, 194084, 1443936, 2416084, 3187545, 191455, 6578569, 2097124, 2431726, 5135591, 2068613, 4341836, 1487517, 2681351, 218164, 51614, 3242505, 510636, 6831711, 407401, 4549079, 3102063, 6310164, 3615795, 6088731, 3748330, 159335, 3988859, 4545794, 3298075, 2209746, 2500722, 5316550, 3452794, 5512515, 1074432, 15647, 4985915, 5775346, 5786442, 3328813, 3584885, 2448698, 2624254, 6897561, 5699035, 6440554, 3412597, 7190320, 7322741, 741504, 5801550, 5005823, 6313348, 639717, 4072005, 5233362, 6336558, 4123163, 4629538, 4003537, 1753993, 3013997, 5815201, 1632964, 6702425, 483432, 5556287, 780197, 2291357, 3719624, 1195892, 5118200, 5577769, 5003187, 2219091, 5531077, 2371347, 2747098, 855737, 4318298, 3434639, 3898748, 3805561, 6742160, 960716, 270350, 4591553, 5985482, 2424316, 3045183, 225421, 2306240, 3121035, 1112277, 1646582, 5895243, 2118088, 3089921, 1863298, 3706394, 7063805, 1188644, 4806318, 3922783, 4657611, 2650577, 1144762, 706239, 4198025, 614915, 5622828, 1243489, 2527646, 3134187, 1752867, 6286297, 6707164, 558028, 1219675, 5977802, 1225972, 4600150, 5645293, 3357749, 4908693, 6781745, 3369355, 5412501, 6776613, 3105452, 339943, 660787, 3057144, 1009701, 1269289, 806475, 3822314, 2666853, 4277768, 6278159, 45350, 643598, 1535900];


        let qwbytes: [u32; N*4] = [4437611, 2413012, 2561853, 217024, 5330325, 7089427, 2311427, 6351624, 5499863, 4289769, 5357427, 7274972, 106504, 242821, 2253842, 1808856, 5335606, 3134800, 2426458, 3632261, 4535293, 989419, 5192086, 6392047, 298410, 6953533, 2087800, 4050586, 4526740, 6865810, 2838195, 6399839, 1286853, 3880068, 6057957, 1999578, 719782, 6108628, 6332205, 2073085, 2967504, 2752136, 5343775, 2740356, 1314590, 3302723, 1738962, 2706521, 3473929, 6951457, 2996326, 6992748, 381023, 3846944, 6828184, 3016490, 3045060, 3914580, 2294407, 6986821, 5275719, 4953353, 2172720, 216516, 1949132, 5493870, 862555, 1697686, 845509, 1483226, 1085765, 6836923, 1896619, 3191569, 7198081, 1747031, 5617286, 379206, 3108064, 2178151, 2443480, 2162293, 6799111, 1425064, 3057113, 6765981, 1885567, 3786226, 5938887, 1107428, 4233888, 4701417, 2639180, 6554617, 766356, 6025704, 6111993, 3584808, 3991636, 7038543, 5562223, 6445094, 1504238, 2157253, 3297563, 2077859, 2116598, 5015384, 4701128, 2041515, 482768, 4488527, 4200479, 3698159, 7052846, 2127700, 7069369, 6296820, 2700179, 7151644, 6860247, 3655168, 6594980, 3546518, 2607585, 5946430, 2541348, 7329803, 2821691, 7116121, 6186626, 3345343, 4473321, 3904407, 693423, 2445483, 2644904, 7206882, 669306, 5642686, 3998187, 3889630, 6499004, 2298735, 6252318, 3242330, 2214510, 4378814, 3347665, 7309399, 6715023, 5147041, 6745091, 853219, 6753440, 6420178, 1304669, 7027607, 3974277, 1300674, 2296177, 2161491, 7018121, 3183902, 156415, 689304, 5353138, 4582057, 6493823, 6001263, 3558168, 6094825, 6686338, 1015493, 1087365, 1856129, 4476177, 1408423, 7056931, 5373463, 5065409, 1095742, 2838103, 4737205, 4452713, 2572302, 3563920, 2608498, 5614482, 7164114, 7097952, 4799346, 1732357, 5565573, 5675334, 6535644, 743032, 7228170, 299460, 2298058, 4465746, 3070500, 5459778, 308475, 663150, 4503263, 3987955, 5328343, 2586267, 365537, 7037397, 3665336, 1833850, 5483004, 5077263, 2782879, 6114981, 6208307, 1205489, 4987417, 2759937, 5267094, 4279842, 3991472, 1455584, 6958412, 126878, 2169776, 2031508, 1487246, 3463208, 1169810, 1872317, 3310506, 1888439, 3126866, 3109556, 3442046, 5868679, 2521670, 2841524, 376409, 3332751, 819363, 7280201, 2910662, 243338, 4288981, 3287666, 3504221, 6784884, 4974655, 4354236, 2366559, 5937080, 0,
5792049, 3692380, 3530653, 6342725, 2436077, 144241, 4660265, 4194595, 2005258, 1567449, 2508649, 4226215, 5741134, 3896402, 6831814, 14624, 5382663, 2184108, 4216657, 5006076, 5114389, 5228145, 1495052, 2153096, 2134137, 6944622, 5253802, 5418118, 4592251, 1952550, 629147, 1690592, 4105607, 5359071, 6139664, 1766646, 838697, 4898716, 589758, 3766288, 939858, 3153765, 90629, 5612716, 5858421, 597445, 6484940, 4085972, 2734074, 1147110, 3909955, 5298256, 5617917, 3807868, 4333778, 7038795, 2395989, 5911973, 266454, 1852078, 4794450, 7172513, 1148693, 5734352, 4362222, 4399350, 1813351, 4500719, 4539119, 4509140, 6255907, 1206565, 871811, 1006200, 3764657, 3604242, 3777127, 6907025, 3028058, 3682250, 3470076, 4756193, 2750499, 4296865, 797589, 5325865, 6913970, 7243295, 6567707, 1620137, 1732870, 543835, 215879, 2418014, 4530491, 6948997, 5986207, 2537858, 5429794, 923479, 4656283, 4432235, 6186512, 457018, 4277023, 3160055, 3850683, 626461, 78504, 40943, 1639590, 6240985, 1591839, 4726251, 1020198, 2590119, 7155947, 3072281, 4625296, 4067592, 1248179, 5174798, 242064, 1385737, 4275979, 6788345, 1307760, 3967141, 2584223, 3327194, 7123579, 4264347, 4440581, 5869465, 5761442, 2281319, 4728900, 1210169, 3549884, 6152719, 3286489, 6946996, 3243262, 1428856, 2407251, 4470617, 4710626, 4873297, 1626982, 6293780, 4502607, 2061492, 3326819, 3403069, 4765401, 4763799, 2629174, 5703960, 3789894, 5534994, 858313, 4471442, 4555441, 4810450, 7198805, 5427713, 1499099, 237427, 3874352, 1579758, 1689499, 2241288, 5776451, 5068419, 6567722, 6346696, 5222782, 1574571, 4733868, 2199685, 2482164, 1609090, 94193, 3325126, 2342558, 2956453, 4178387, 747933, 5655132, 5656554, 392188, 3165459, 4976423, 6106956, 938446, 2528275, 5204824, 2993959, 6026627, 6830481, 2050496, 4086228, 4911672, 3002254, 6926901, 1884465, 2262452, 5922950, 6227386, 2176733, 149968, 5560255, 1371596, 6609656, 1028046, 4516552, 1970545, 3964810, 1569337, 1550067, 5683054, 4815956, 689177, 2219119, 6238072, 2904877, 743360, 6734947, 559047, 2881626, 4985311, 165165, 133460, 3001904, 2985545, 5379324, 210144, 1226988, 2824064, 897211, 4062969, 4853358, 6909671, 4433053, 2619813, 6020715, 6346321, 3089538, 5375183, 5449152, 1073192, 2962494, 265400, 600024, 5803614, 0,
2879306, 2654273, 2797877, 721247, 3002139, 7066819, 6400127, 4186153, 4933407, 1282941, 2342991, 4516081, 3776894, 10547, 953363, 946802, 3410304, 329523, 5650213, 4858266, 5522448, 5792740, 7222478, 6998903, 1209261, 2858256, 6280467, 6950224, 4765899, 1116117, 6420673, 427842, 2764975, 1648883, 1359644, 7183068, 846839, 2596071, 2692315, 6960200, 847899, 2181184, 2646685, 1718819, 2607136, 3436943, 1609020, 5470678, 586071, 7104553, 3755932, 5328941, 2426106, 4746276, 5653326, 5584170, 6788678, 1580539, 7295306, 3209621, 923958, 6865014, 2774449, 2238419, 1917719, 71587, 2589536, 5286124, 1762597, 6194924, 5846356, 2850541, 218200, 6820433, 6632265, 6577832, 3485103, 4284432, 6526871, 3871742, 6399588, 1655106, 2275321, 20097, 694399, 1384147, 2065001, 5935741, 684555, 4739312, 5814124, 4549937, 5228238, 7061406, 1504767, 4615071, 2389514, 168013, 241472, 1270404, 5558301, 5838688, 5225873, 3500240, 2578667, 4302243, 6775571, 5435775, 2908572, 1201800, 6791569, 6968561, 6137532, 1003936, 5582258, 1669024, 2123567, 4407780, 292467, 1562655, 2806039, 748281, 4000777, 6320388, 261982, 7236904, 5051498, 5453394, 6779235, 1250926, 3635748, 1801859, 1131434, 211456, 4652064, 1103781, 5473789, 2983559, 1269791, 1628091, 2550135, 4623329, 6724852, 3083758, 6238207, 5304007, 4037024, 7264788, 3408981, 1992782, 3225576, 4318953, 1871656, 1822016, 1280048, 1547512, 6650669, 4559324, 3077557, 5459443, 5765711, 5669063, 5830524, 7149768, 3737018, 116235, 6887348, 3796271, 1608285, 4595708, 4720886, 5130684, 224012, 2259905, 6035357, 1579050, 377379, 580033, 3111022, 1248675, 240716, 5923878, 3014183, 3126366, 1607910, 7252965, 5904585, 2142468, 3422661, 1986681, 2031041, 5616592, 7235316, 2494805, 3676998, 942791, 3994283, 3615870, 7137460, 630143, 4653812, 6949846, 4681445, 6081322, 609837, 552604, 1169962, 4769296, 3107190, 916795, 1125746, 2212062, 234548, 5924166, 1293055, 3069775, 2713564, 59788, 6962824, 355997, 7270147, 6770111, 1484594, 736647, 1263123, 6113264, 5617755, 6551470, 6889495, 6308578, 4637292, 5652926, 320591, 5208767, 5440245, 7114487, 3878900, 6437169, 436270, 3268534, 7203540, 4798124, 6044001, 4555853, 5778816, 4480960, 5468063, 1916873, 1549100, 5236056, 4681496, 2406479, 7332689, 5260692, 6799947, 0,
477489, 5249916, 4415767, 2973250, 3978209, 2338132, 1839074, 2869505, 4033010, 3850299, 5158970, 750554, 4395669, 5957160, 543461, 7112412, 6092692, 4156194, 3040654, 5127610, 1888835, 5243969, 3268870, 2079843, 3422125, 587153, 5528010, 3138992, 3387927, 2889162, 3334207, 2193011, 6747518, 334408, 5809892, 2014104, 1250804, 7224500, 959692, 6003185, 5905126, 7337045, 6474075, 488990, 4833849, 2160238, 4732221, 3909918, 1523907, 5340625, 4528832, 2191447, 7232876, 3306490, 3168775, 506043, 6136457, 6422861, 4324955, 6241566, 7169139, 3518625, 2999761, 4561126, 6389445, 5529066, 2583586, 561859, 3756825, 706028, 5651870, 1572469, 427952, 189769, 854554, 1616649, 1952169, 6820737, 5189414, 3995525, 5542971, 3038275, 7126772, 417045, 3135483, 3985367, 1630204, 6396050, 3119679, 3960684, 2032633, 180042, 7089147, 1685025, 2909297, 3210305, 5794510, 2209765, 7045543, 5400501, 4818257, 2658529, 3433512, 3287479, 460488, 1681442, 784216, 4920058, 1221344, 4620581, 3698059, 5864999, 4027004, 82755, 2047820, 4498188, 3771725, 571589, 4290720, 521564, 2785839, 4324220, 3032578, 29898, 6708570, 356028, 3190725, 3463566, 4409425, 159379, 3748070, 2455724, 6108563, 1087259, 3971250, 6136352, 6996148, 3464814, 3904009, 5491182, 4590449, 2854292, 6176387, 6654077, 6142566, 3662000, 2590784, 4143681, 581934, 453241, 3870359, 2055691, 3117927, 1082784, 6962340, 3633429, 3258109, 7264, 808253, 23141, 56955, 1322432, 3285752, 7243985, 1851882, 6045229, 5924549, 240759, 3284693, 3854854, 1540861, 3357069, 1653217, 1662000, 6729682, 6145481, 1138147, 668585, 4013584, 3258251, 1707161, 446947, 1178022, 1146258, 177457, 922432, 823625, 4992554, 3306148, 3377128, 7027773, 6678466, 3444372, 1339559, 1908866, 6418436, 6600075, 268009, 1438808, 6611232, 1497070, 1796631, 1714149, 3789842, 7023750, 1258698, 6214414, 3447445, 6494059, 3198280, 2014736, 5748020, 2689289, 6507007, 2203000, 2348784, 4301902, 1846927, 921727, 7012199, 4841773, 6860337, 6212515, 3186432, 4403168, 4322494, 4022741, 1048115, 5377705, 6952880, 6133887, 1144319, 1538742, 6177162, 5375713, 3048142, 3173159, 4436687, 1420555, 4367053, 5020254, 34940, 3925942, 1583237, 4853612, 1470476, 1366005, 1069588, 4857037, 3191143, 3301121, 5720692, 4020723, 934343, 6504454, 0];

        let ctildebytes: [u32; HASH_DIGEST_WIDTH] = [6995323, 7046979, 3873472, 6172634, 4748850, 1404950, 1584517, 1221593, 36441, 7088147, 3990121, 4808743];

        let mbytes: [u32; 12] = [5993791, 2734491, 6123477, 2119710, 6869917, 6622114, 195758, 4190088, 5117718, 3567869, 5429505, 4107333];

        let nonce: [u32; 12] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

        let comm: [u32; 24] = [1072033, 2612375, 4472495, 5737496, 1806042, 4788904, 2110758, 1949203, 981614, 6493472, 2941749, 1256222, 3620234, 4878823, 2472280, 2939805, 5175205, 3146359, 5420779, 6346899, 5696743, 4010546, 6632886, 4140035];

        let com_rbytes: [u32; HASH_DIGEST_WIDTH] = [0; HASH_DIGEST_WIDTH];

        let mut len: usize = 0;

        let start = Instant::now();

        let proof_bytes_ptr = prove_signature(zbytes.as_ptr(), wbytes.as_ptr(), qwbytes.as_ptr(), ctildebytes.as_ptr(), mbytes.as_ptr(), comm.as_ptr(), com_rbytes.as_ptr(), nonce.as_ptr(),  &mut len);
    
        println!("{}", verify_signature(proof_bytes_ptr, len, comm.as_ptr(), nonce.as_ptr()));

        println!("{:?}", start.elapsed());
    }
} */

#[cfg(test)]
pub mod test2 {

    use super::*;

    #[test]
    fn test_merkle_proof () {


        let example_attrs_u32: [[u32; HASH_DIGEST_WIDTH]; 16] = [[6709091, 6169249, 5628887, 4660270, 6942066, 760301, 7289375, 4651720, 3272026, 5191140, 1168225, 3249879, ],
        [1883096, 3334600, 2419478, 625713, 1304525, 7321007, 200660, 3654382, 6947786, 1446773, 4142099, 1534900, ],
        [2166230, 6046054, 1729067, 6806663, 6712661, 5211053, 1800327, 1965301, 2578585, 2595240, 1941328, 1688092, ],
        [1903665, 2302439, 3742632, 4673238, 3702981, 7267099, 2703170, 3795636, 2560825, 1463000, 5038689, 6962979, ],
        [5261978, 6376561, 6334061, 2439191, 4256727, 3431320, 838223, 2156492, 5566949, 196716, 6772525, 4086382, ],
        [6267255, 3287990, 2730841, 2580225, 5577307, 2023051, 3124779, 1260312, 2238516, 5480509, 2169133, 3875935, ],
        [5294687, 5349395, 6077507, 4161172, 4821248, 6288095, 1239158, 4408471, 2498506, 2545645, 3580392, 2523776, ],
        [4292661, 7186432, 4005510, 4596007, 5426302, 3519061, 5015946, 6889555, 4572833, 1879075, 5963844, 4018330, ],
        [1051056, 6625906, 166797, 3038796, 3963215, 4267920, 5928947, 6951298, 5207067, 5553312, 1279897, 809137, ],
        [4517713, 1282452, 4932912, 1490070, 6225174, 4647588, 6199104, 5096281, 1913974, 7223470, 2067186, 2771324, ],
        [700963, 5152205, 6154482, 636882, 5538262, 255152, 5950538, 2076935, 3885714, 4054122, 4678293, 815884, ],
        [3629804, 652587, 6512855, 6885016, 1883773, 3445290, 2408204, 5827794, 1801908, 4653391, 3839995, 4436, ],
        [951587, 3526714, 5912568, 6016870, 341122, 4238883, 1468158, 6578567, 341610, 2634026, 4100685, 4788968, ],
        [3289041, 6717852, 3156578, 3050773, 6237040, 4122505, 2793174, 1852424, 4610830, 1391938, 1160802, 2370928, ],
        [7261957, 638429, 2489791, 5588808, 810406, 6004723, 6270530, 6802187, 3130153, 5044087, 3946977, 1239117, ],
        [5767991, 4585105, 5129167, 4965230, 6506881, 752062, 3433833, 4379951, 2053525, 5917503, 2188161, 3154167, ]];

        let mut example_attrs: [[BaseElement; HASH_DIGEST_WIDTH]; 16] = [[Default::default(); 12]; 16];
        
        for i in 0..16 {
            example_attrs[i] = example_attrs_u32[i].map(BaseElement::new);
        }

        let comm_u32: [u32; HASH_RATE_WIDTH] = [434031, 793865, 2790115, 2641619, 3779823, 4687400, 5043245, 2179103, 1525361, 1548302, 5061098, 3487740, 7282711, 3416983, 2970685, 1683956, 5938759, 7331637, 4939426, 3516863, 378218, 3627887, 131057, 1048311, ];
        let comm: [BaseElement; HASH_RATE_WIDTH] = comm_u32.map(BaseElement::new);

        let secret_comm_u32: [u32; HASH_RATE_WIDTH] = [3598049, 5948367, 495133, 3537745, 3028752, 4899071, 6361326, 269242, 4399013, 7200862, 4385127, 7111978, 5085508, 1316843, 4254913, 1067592, 4286291, 1568535, 4877137, 1795638, 969826, 4536722, 5895964, 833797, ];
        let secret_comm: [BaseElement; HASH_RATE_WIDTH] = secret_comm_u32.map(BaseElement::new);

        let nonce0: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ONE; HASH_DIGEST_WIDTH];

        let mut cert_list: Vec<Vec<[BaseElement; HASH_DIGEST_WIDTH]>> = vec![example_attrs.to_vec() , example_attrs.to_vec(), example_attrs.to_vec() ];
        let mut comms = vec![comm , comm, comm ];
        let mut nonces = vec![nonce0.clone() , nonce0.clone(), nonce0.clone()];
        let mut num_of_attributes = vec![16 , 16, 16];

        let disclosed_indices: Vec<Vec<usize>> = [[3,4,5].to_vec() , [3,4,5].to_vec(), [3,4,5].to_vec()].to_vec();

        /* let example_attr_u32_0: [u32; HASH_DIGEST_WIDTH] = [5324, 1251, 43534, 124235, 432241, 6436, 2341, 23523, 2525, 658965, 4583, 245389];
        let example_attr0: [BaseElement; HASH_DIGEST_WIDTH] = example_attr_u32_0.map(BaseElement::new);

        let example_attr_u32_1: [u32; HASH_DIGEST_WIDTH] = [1651613, 75257, 753, 8237, 72753, 73257, 237341, 823523, 52525, 6965, 47583, 24589];
        let example_attr1: [BaseElement; HASH_DIGEST_WIDTH] = example_attr_u32_1.map(BaseElement::new);

        let example_attr_u32_2: [u32; HASH_DIGEST_WIDTH] = [142, 27537, 3, 77, 38, 373, 8383, 352, 78973, 453, 8736, 6378];
        let example_attr2: [BaseElement; HASH_DIGEST_WIDTH] = example_attr_u32_2.map(BaseElement::new);

        let mut cert0: Vec<[BaseElement; HASH_DIGEST_WIDTH]> = vec![];

        cert0.push(example_attr0);
        cert0.push(example_attr1);
        for _i in 1..16 {
            cert0.push(example_attr1);
            cert0.push(example_attr2);
        }

        let mut cert1: Vec<[BaseElement; HASH_DIGEST_WIDTH]> = vec![];

        cert1.push(example_attr0);
        cert1.push(example_attr2);
        for _i in 1..16 {
            cert1.push(example_attr2);
            cert1.push(example_attr1);
        }

        let mut cert2: Vec<[BaseElement; HASH_DIGEST_WIDTH]> = vec![];

        //This cert has different first attr.
        cert2.push(example_attr1);
        cert2.push(example_attr2);
        for _i in 1..16 {
            cert2.push(example_attr2);
            cert2.push(example_attr1);
        }

        let comm0_u32: [u32; HASH_RATE_WIDTH] = [6884464, 5796844, 4915403, 2685788, 1262740, 3133087, 444436, 6212006, 87333, 4752267, 4358664, 1173227, 2700755, 1797861, 5710232, 4480878, 6943763, 3941100, 1628521, 1965981, 4655992, 3329326, 7315964, 2391907];
        let comm0: [BaseElement; HASH_RATE_WIDTH] = comm0_u32.map(BaseElement::new);

        let comm1_u32: [u32; HASH_RATE_WIDTH] = [4016868, 378337, 5062150, 4000076, 6430762, 3871076, 6667880, 1309979, 2049965, 1774621, 1990321, 487812, 5976654, 6942105, 6459281, 5965486, 593837, 854088, 917276, 4519014, 134229, 3265489, 268717, 1977970];
        let comm1: [BaseElement; HASH_RATE_WIDTH] = comm1_u32.map(BaseElement::new);

        let comm2_u32: [u32; HASH_RATE_WIDTH] = [810421, 5657095, 6187730, 6252613, 6566569, 4835895, 2074026, 2107415, 5629227, 681991, 855972, 2574051, 1906283, 2526605, 1827260, 1515521, 1603600, 6621959, 3468030, 398881, 5983142, 1734108, 1357845, 1208531];
        let comm2: [BaseElement; HASH_RATE_WIDTH] = comm2_u32.map(BaseElement::new);

        let nonce0: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ONE; HASH_DIGEST_WIDTH];
        let nonce1: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ZERO, BaseElement::ONE, BaseElement::ONE, BaseElement::ONE, BaseElement::ZERO, BaseElement::ONE, BaseElement::ONE, BaseElement::ONE, BaseElement::ZERO, BaseElement::ONE, BaseElement::ONE, BaseElement::ONE];
        //let nonce2: [BaseElement; HASH_DIGEST_WIDTH] = [BaseElement::ONE; HASH_DIGEST_WIDTH];

        let mut cert_list: Vec<Vec<[BaseElement; HASH_DIGEST_WIDTH]>> = vec![cert0.clone(), cert1.clone()];
        let mut comms = vec![comm0.clone(), comm1.clone()];
        let mut nonces = vec![nonce0.clone(), nonce1.clone()];
        let mut num_of_attributes = vec![cert0.len(), cert1.len()];

        //It is assumed that disclosed indices are soreted
        let disclosed_indices: Vec<Vec<usize>> = [[2, 4, 5, 6, 7, 13, 15].to_vec(), [3, 7, 24, 28].to_vec()].to_vec();
        //[9, 11, 12, 13, 14].to_vec()*/

        let mut disclosed_attributes: Vec<Vec<[BaseElement; HASH_DIGEST_WIDTH]>> = Vec::new();
        for i in 0..disclosed_indices.len() {
            disclosed_attributes.push(Vec::new());
            for j in 0..disclosed_indices[i].len() {
                disclosed_attributes[i].push(cert_list[i][disclosed_indices[i][j]]);
            }
        }

        let mut start = Instant::now();

        let proof = merklepf::prove(cert_list.clone(), disclosed_indices.clone(), comms.clone(), secret_comm, nonces.clone(), nonce0);
        println!("proof len {}", proof.to_bytes().len());
        println!("{:?}", start.elapsed());
        let proof_bytes = proof.to_bytes();
        println!("Proof size: {:.1} KB", proof_bytes.len() as f64 / 1024f64);
        println!("Proof security: {} bits", proof.security_level(true));
        start = Instant::now();
        match merklepf::verify(proof.clone(), disclosed_attributes.clone(), disclosed_indices.clone(), num_of_attributes.clone(), comms.clone(), secret_comm, nonces.clone(), nonce0) {
            Ok(_) => {
                println!("Verified.");
            },
            Err(msg) => 
            {
                println!("Failed to verify proof: {}", msg);
            }
        }
        println!("{:?}", start.elapsed());
        /* cert_list[1] = cert2;
        comms[1] = comm2;
        let proof2 = merklepf::prove(cert_list.clone(), disclosed_indices.clone(), comms.clone(), nonces.clone());
        match merklepf::verify_with_wrong_inputs(proof2.clone(), disclosed_attributes.clone(), disclosed_indices.clone(), num_of_attributes, comms, nonces) {
            Ok(_) => {
                println!("This should have failed.");
            },
            Err(msg) => 
            {
                println!("Failed successfully: {}", msg);
            }
        } */
    }
}